{"version":3,"sources":["www/ducks/alert/reducer/reduceReplaceAlert.js","www/ducks/alert/actions/deleteAlert.js","www/ducks/alert/actions/replaceAlert.js","www/lib/freezeReducer.js","www/lib/groupBy.js","www/lib/indexBy.js","www/lib/range.js","www/lib/useDispatch.js","www/lib/useSelect.js","www/ducks/alert/components/Alert.js","www/ducks/alert/selectors/getAlert.js","www/ducks/alert/index.js","www/ducks/alert/reducer/index.js","www/ducks/alert/reducer/reduceDeleteAlert.js","www/ducks/blog/actions/fetchPost.js","www/ducks/blog/actions/fetchPostList.js","www/ducks/blog/actions/setPost.js","www/ducks/blog/reducer/reduceSetPost.js","www/lib/api.js","www/ducks/blog/middleware/whenFetchPost.js","www/ducks/blog/middleware/whenFetchPostList.js","www/ducks/blog/selectors/getBlog.js","www/ducks/blog/selectors/getPost.js","www/ducks/blog/selectors/listPosts.js","www/ducks/blog/index.js","www/ducks/blog/reducer/index.js","www/ducks/blog/middleware/index.js","www/ducks/game/actions/fetchGame.js","www/ducks/game/actions/loginGame.js","www/ducks/game/actions/logoutGame.js","www/ducks/game/actions/newGame.js","www/ducks/game/actions/replaceGame.js","www/ducks/game/reducer/reduceReplaceGame.js","www/ducks/game/selectors/getGame.js","www/ducks/game/selectors/listEntities.js","www/ducks/game/selectors/getEntitiesByCoordinates.js","www/ducks/game/selectors/listEntitiesAtCoordinate.js","www/ducks/game/selectors/getEntitiesByCoordinatesByType.js","www/ducks/game/selectors/getMap.js","www/ducks/game/selectors/getMessages.js","www/ducks/game/selectors/getPlayerId.js","www/ducks/game/selectors/getRace.js","www/ducks/game/selectors/getTurnNumber.js","www/ducks/game/selectors/hasPlayer.js","www/ducks/game/index.js","www/ducks/game/reducer/index.js","www/ducks/game/reducer/reduceLogoutGame.js","www/ducks/game/middleware/index.js","www/ducks/game/middleware/whenFetchGame.js","www/ducks/game/middleware/whenLoginGame.js","www/ducks/game/middleware/whenNewGame.js","www/ducks/gameCommands/actions/compileGame.js","www/ducks/gameCommands/actions/nextPlayer.js","www/ducks/gameCommands/actions/saveCommands.js","www/ducks/gameCommands/actions/setCommand.js","www/ducks/gameCommands/reducer/reduceReplaceGame.js","www/ducks/gameCommands/reducer/reduceSetCommand.js","www/ducks/gameCommands/selectors/getCommands.js","www/ducks/gameCommands/selectors/getEntityCommands.js","www/ducks/gameCommands/selectors/getEntityCommand.js","www/ducks/gameCommands/selectors/listCommands.js","www/ducks/gameCommands/hooks/useCommandValue.js","www/ducks/gameCommands/index.js","www/ducks/gameCommands/reducer/index.js","www/ducks/gameCommands/middleware/index.js","www/ducks/gameCommands/middleware/whenCompileGame.js","www/ducks/gameCommands/middleware/whenNextPlayer.js","www/ducks/gameCommands/middleware/whenSaveCommands.js","www/ducks/view/actions/setView.js","www/ducks/view/reducer/reduceSetView.js","www/ducks/view/reducer/index.js","www/ducks/view/components/Link.js","www/ducks/view/selectors/getView.js","www/ducks/gameView/middleware/index.js","www/ducks/appDucks.js","www/ducks/gameView/index.js","www/ducks/gameView/middleware/whenReplaceGame.js","www/ducks/view/index.js","www/views/blog/ListPosts.js","www/views/blog/ShowPost.js","www/entities/star/index.js","www/entities/star/StarCommand.js","www/entities/star/StarDescription.js","www/entities/ship/MoveShipCommand.js","www/entities/starbase/index.js","www/entities/descriptors.js","www/entities/ship/index.js","www/entities/ship/ShipCommand.js","www/entities/ship/ShipDescription.js","www/entities/starbase/StarbaseCommand.js","www/entities/starbase/StarbaseDescription.js","www/entities/Entities.js","www/entities/Entity.js","www/views/cell/CellView.js","www/views/login/LoginView.js","www/views/map/MapCell.js","www/views/map/mapConstants.js","www/views/map/MapView.js","www/views/map/MessagesView.js","www/views/new/NewView.js","www/views/play/MapStatsView.js","www/views/RootView.js","www/ducks/view/components/makeSubView.js","www/views/home/HomeView.js","www/views/play/PlayView.js","www/views/game/GameView.js","www/views/blog/BlogView.js","www/layout/AppLayout.js","www/layout/Header.js","www/layout/Version.js","www/serviceWorker.js","www/index.js","www/makeApp.js","www/ducks/createDucksStore.js"],"names":["reduceReplaceAlert","state","action","text","DELETE_ALERT","deleteAlert","type","REPLACE_ALERT","replaceAlert","freezeds","WeakSet","freezeReducer","reduce","freezeState","has","add","Object","keys","forEach","k","val","freeze","groupBy","array","keyOrFn","keyFn","o","result","key","items","push","indexBy","range","start","count","undefined","i","useDispatch","actionCreator","args","Error","dispatchRR","useDispatchRR","dispatch","useCallback","moreArgs","useSelect","select","selector","value","useSelector","Alert","alert","getAlert","dismiss","onClick","data-testid","onClose","dismissible","alertDuck","default","fetchPost","postId","fetchPostList","setPost","post","reduceSetPost","id","api","get","url","options","fetch","method","headers","response","json","ok","Promise","reject","status","data","put","body","JSON","stringify","delete","whenFetchPost","store","a","async","split","filter","line","test","join","whenFetchPostList","list","p","getBlog","blog","getPost","compareIds","b","listPosts","createSelector","values","sort","blogDuck","middleware","next","fetchGame","playerId","loginGame","logoutGame","newGame","mapCode","players","replaceGame","game","reduceReplaceGame","getGame","listEntities","entities","getEntitiesByCoordinates","e","row","column","EMPTY","listEntitiesAtCoordinate","coordinates","getEntitiesAtCoordinateByType","getMap","map","getMessages","messages","getPlayerId","getRace","race","getTurnNumber","turnNumber","hasPlayer","gameDuck","whenFetchGame","whenLoginGame","message","whenNewGame","compileGame","nextPlayer","saveCommands","setCommand","entityId","command","nextState","commands","reduceSetCommand","getCommands","gameCommands","getEntityCommand","getEntityCommands","compareCommands","listCommands","flatMap","useCommandValue","fallbackValue","gameCommandsDuck","getState","whenCompileGame","whenNextPlayer","whenSaveCommands","setView","view","reduceSetView","reduceView","root","linkClass","css","Link","children","className","followLink","cx","getView","field","appDucks","gameView","whenReplaceGame","ListPosts","goHome","refresh","useEffect","Container","Breadcrumb","Item","active","title","postClassName","ShowPost","goBlog","backToPosts","Button","variant","Card","bg","source","escapeHtml","starDescriptor","priority","Command","entity","shipName","setShipName","onShipName","ev","target","starbaseName","setStarbaseName","onStarbaseName","droids","setDroids","onDroids","Body","Form","Group","controlId","Label","Control","onChange","placeholder","Description","name","population","maxPopulation","minerals","mineralsReserve","Header","MoveShipCommand","direction","move","moveDown","moveUp","moveLeft","moveRight","ButtonGroup","descriptors","star","load","setLoad","onLoad","fuel","maxFuel","descriptorsByType","Entities","descriptor","Entity","getDescriptor","currentPlayerId","CellView","onBack","useMemo","LoginView","useState","setPlayerId","onPlayerId","dispatchLogin","onSubmit","preventDefault","Row","Col","md","cellClassName","MapCell","byType","onClickCell","style","width","height","left","top","position","contents","some","MapView","columns","rows","background","margin","Message","go","ListGroup","MessagesView","index","NewPlayer","setPlayers","player","setPlayer","changes","copy","onRace","playerN","raceN","as","MapStatsView","onNext","onCompile","Views","RootView","Home","Play","logged","Game","onSave","onLogout","New","setMapCode","onMapCode","addPlayer","dispatchNewGame","Blog","null","viewName","View","makeUnknownView","AppLayout","Version","goPlay","goNew","goGame","Navbar","expand","Brand","Toggle","aria-controls","Collapse","Nav","versionClass","pkg","version","Boolean","window","location","hostname","match","App","preloadedState","appCompose","compose","appReducer","ducksReducer","appMiddleware","ducksMiddleware","createStore","applyMiddleware","thunk","createDucksStore","makeApp","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAAO,SAASA,EAAmBC,EAAOC,GACxC,MAAO,CACLC,KAAMD,EAAOC,MCFV,IAAMC,EAAe,qBACrB,SAASC,IACd,MAAO,CACLC,KAAMF,GCHH,IAAMG,EAAgB,sBACtB,SAASC,EAAaL,GAC3B,MAAO,CACLG,KAAMC,EACNJ,Q,aCJJ,IAAMM,EAAW,IAAIC,QAgBd,SAASC,EAAcC,GAC5B,OAAO,SAASX,EAAOC,GAErB,OAjBJ,SAASW,EAAYZ,GAWnB,MAVqB,kBAAVA,IAAuBQ,EAASK,IAAIb,IAAUA,IACvDQ,EAASM,IAAId,GACbe,OAAOC,KAAKhB,GAAOiB,SAAQ,SAAAC,GACzB,IAAMC,EAAMnB,EAAMkB,GACC,kBAARC,GAAoBA,IAAQnB,EAAMkB,KAC3ClB,EAAMkB,GAAKN,EAAYO,QAI7BJ,OAAOK,OAAOpB,GACPA,EAMEY,CADWD,EAAOX,EAAOC,KCd7B,SAASoB,IAAqC,IAA7BC,EAA4B,uDAApB,GAAIC,EAAgB,uDAAN,KACtCC,EAA2B,kBAAZD,EAAuB,SAAAE,GAAC,OAAIA,EAAEF,IAAWA,EACxDG,EAAS,GAUf,OATAJ,EAAML,SAAQ,SAAAQ,GACZ,IAAME,EAAMH,EAAMC,GACdG,EAAQF,EAAOC,GACdC,IACHA,EAAQ,GACRF,EAAOC,GAAOC,GAEhBA,EAAMC,KAAKJ,MAENC,EChBF,SAASI,EAAQR,GAAwB,IAAjBC,EAAgB,uDAAN,KACjCC,EAA2B,kBAAZD,EAAuB,SAAAE,GAAC,OAAIA,EAAEF,IAAWA,EACxDG,EAAS,GAKf,OAJAJ,EAAML,SAAQ,SAAAQ,GACZ,IAAME,EAAMH,EAAMC,GAClBC,EAAOC,GAAOF,KAETC,ECPF,SAASK,EAAMC,EAAOC,QACbC,IAAVD,IACFA,EAAQD,EACRA,EAAQ,GAGV,IADA,IAAMN,EAAS,GACNS,EAAI,EAAGA,EAAIF,EAAOE,GAAK,EAAGT,EAAOG,KAAKM,EAAIH,GACnD,OAAON,ECJF,SAASU,EAAYC,GAAyB,IAAD,uBAANC,EAAM,iCAANA,EAAM,kBAClD,IAAKD,EAAe,MAAM,IAAIE,MAAM,uCACpC,IAAMC,EAAaC,cACbC,EAAWC,uBACf,WAAkB,IAAD,uBAAbC,EAAa,yBAAbA,EAAa,gBACf,IAAM3C,EAASoC,EAAa,WAAb,EAAiBC,EAAjB,OAA0BM,IACzCJ,EAAWvC,KAHa,CAMzBoC,GANyB,OAMPC,IAErB,OAAOI,E,WCXF,SAASG,EAAUC,GAAkB,IAAD,uBAANR,EAAM,iCAANA,EAAM,kBACzC,IAAMS,EAAWJ,uBACf,SAAA3C,GAAK,OAAI8C,EAAM,WAAN,GAAO9C,GAAP,OAAiBsC,MADA,CAGzBQ,GAHyB,OAGdR,IAERU,EAAQC,YAAYF,GAE1B,OAAOC,ECNF,SAASE,IACd,IAAMC,EAAQN,EAAUO,GAClBC,EAAUjB,EAAYhC,GAC5B,OAAK+C,EAGH,yBAAKG,QAASD,EAASE,cAAY,aACjC,kBAAC,IAAD,CAASC,QAASH,EAASI,aAAW,GACnCN,EAAMjD,OALM,KCRd,SAASkD,EAASpD,GACvB,OAAOA,EAAMmD,MCKR,IAAMO,EAAY,CAAEC,QCHpB,WAA4C,IAAvB3D,EAAsB,uDAAd,KAAMC,EAAQ,uCAChD,OAAQA,EAAOI,MACb,KAAKF,EACH,OCLG,KDML,KAAKG,EACH,OAAOP,EAAmBC,EAAOC,GACnC,QACE,OAAOD,KETN,SAAS4D,EAAUC,GACxB,MAAO,CACLxD,KAHsB,kBAItBwD,UCHG,SAASC,IACd,MAAO,CACLzD,KAH2B,wBCCxB,SAAS0D,EAAQC,GACtB,MAAO,CACL3D,KAHoB,gBAIpB2D,Q,mBCJG,SAASC,EAAcjE,EAAOC,GAAS,IACpC+D,EAAS/D,EAAT+D,KACAE,EAAOF,EAAPE,GACR,OAAO,eAAKlE,EAAZ,eAAoBkE,EAApB,eAA8BlE,EAAMkE,GAApC,GAA4CF,K,oBCHxCG,EAAM,CACJC,IADI,SACAC,EAAKC,GADL,oGAEeC,MAAMF,EAAD,aAC1BG,OAAQ,MACRC,QAAQ,aACN,eAAgB,mCACZH,GAAWA,EAAQG,UAEtBH,KARG,cAEFI,EAFE,0BAWaA,EAASC,QAXtB,UAWFjD,EAXE,OAaHgD,EAASE,GAbN,yCAcCC,QAAQC,OAAO,CACpBC,OAAQL,EAASK,OACjBC,KAAMtD,KAhBF,gCAmBDA,GAnBC,sCAsBJuD,IAtBI,SAsBAZ,EAAKa,EAAMZ,GAtBX,2FAuBDH,EAAIC,IAAIC,EAAR,aACLG,OAAQ,MACRU,KAAMC,KAAKC,UAAUF,IAClBZ,KA1BG,sCA8BJN,KA9BI,SA8BCK,EAAKa,EAAMZ,GA9BZ,2FA+BDH,EAAIC,IAAIC,EAAR,aACLG,OAAQ,OACRU,KAAMC,KAAKC,UAAUF,IAClBZ,KAlCG,sCAsCJe,OAtCI,SAsCGhB,EAAKC,GAtCR,2FAuCDH,EAAIC,IAAIC,EAAR,aAAeG,OAAQ,UAAaF,KAvCnC,uCA2CGH,ICjCR,SAAemB,EAAcC,EAAOtF,GAApC,iBAAAuF,EAAAC,OAAA,uDACG5B,EAAW5D,EAAX4D,OADH,WAAA2B,EAAA,MAEcrB,EAAIC,IAAJ,wBAAyBP,KAFvC,QAECG,EAFD,QAGAkB,KAA6BlB,EAAKkB,KARpCQ,MAAM,MACNC,QAAO,SAAAC,GAAI,OAAK,oBAAoBC,KAAKD,MACzCE,KAAK,MAORP,EAAM7C,SAASqB,EAAQC,IAJlB,qCCPA,SAAe+B,EAAkBR,EAAOtF,GAAxC,eAAAuF,EAAAC,OAAA,kEAAAD,EAAA,MACkBrB,EAAIC,IAAI,kBAD1B,kBACG4B,KACH/E,SAAQ,SAAAgF,GAAC,OAAIV,EAAM7C,SAASqB,EAAQkC,OAFpC,qCCHA,SAASC,EAAQlG,GACtB,OAAOA,EAAMmG,KCCR,SAASC,EAAQpG,EAAjB,GAAqC,IAAX6D,EAAU,EAAVA,OAC/B,OAAOqC,EAAQlG,GAAO6D,G,YCAxB,SAASwC,EAAWb,EAAGc,GACrB,OAAId,EAAEtB,GAAKoC,EAAEpC,GAAW,EACpBsB,EAAEtB,GAAKoC,EAAEpC,IAAY,EAClB,EAOF,IAAMqC,EAHJC,YAAeN,GAAS,SAAAC,GAAI,OAAIpF,OAAO0F,OAAON,GAAMO,KAAKL,MCJrDM,EAAW,CAAEhD,QCHnB,WAAyC,IAArB3D,EAAoB,uDAAZ,GAAIC,EAAQ,uCAC7C,OAAQA,EAAOI,MACb,ITLoB,gBSMlB,OAAO4D,EAAcjE,EAAOC,GAC9B,QACE,OAAOD,IDFkC4G,WEHjB,SAAA5G,GAAK,OAAI,SAAA6G,GAAI,OAAI,SAAM5G,GAAN,SAAAuF,EAAAC,OAAA,gDAC7CoB,EAAK5G,GADwC,KAGrCA,EAAOI,KAH8B,OZHrB,oBYGqB,OXHhB,yBWGgB,+CAKlCiF,EAActF,EAAOC,IALa,gCAOlC8F,EAAkB/F,IAPgB,yCCFxC,SAAS8G,EAAUC,GACxB,MAAO,CACL1G,KAHsB,aAItB0G,YCHG,SAASC,EAAUD,GACxB,MAAO,CACL1G,KAHsB,aAItB0G,YCHG,SAASE,IACd,MAAO,CACL5G,KAHuB,eCCpB,SAAS6G,EAAQC,EAASC,GAC/B,MAAO,CACL/G,KAHoB,WAIpB8G,UACAC,WCJG,SAASC,EAAYC,GAC1B,MAAO,CACLjH,KAHwB,eAIxBiH,QCJG,SAASC,EAAkBvH,EAAOC,GACvC,OAAOA,EAAOqH,KCDT,SAASE,EAAQxH,GACtB,OAAOA,EAAMsH,KCCR,SAASG,EAAazH,GAC3B,IAAMsH,EAAOE,EAAQxH,GACrB,OAAOsH,GAAQA,EAAKI,SCMf,IAAMC,EALJnB,YAAeiB,GAAc,SAAAC,GAAQ,OAC1CrG,EAAQqG,GAAU,SAAAE,GAAC,gBAAOA,EAAEC,IAAT,YAAgBD,EAAEE,cCJnCC,EAAQ,GACP,SAASC,EAAyBhI,EAAOiI,GAAc,IACpDJ,EAAgBI,EAAhBJ,IAAKC,EAAWG,EAAXH,OACb,OAAOH,EAAyB3H,GAAzB,UAAmC6H,EAAnC,YAA0CC,KAAaC,ECKzD,IAAMG,GALJ1B,YAAewB,GAA0B,SAAAN,GAAQ,OACtDrG,EAAQqG,EAAU,WCJf,SAASS,GAAOnI,GACrB,IAAMsH,EAAOE,EAAQxH,GACrB,OAAOsH,GAAQA,EAAKc,ICFf,SAASC,GAAYrI,GAC1B,IAAMsH,EAAOE,EAAQxH,GACrB,OAAOsH,GAAQA,EAAKgB,SCFf,SAASC,GAAYvI,GAC1B,IAAMsH,EAAOE,EAAQxH,GACrB,OAAOsH,GAAQA,EAAKP,SCFf,SAASyB,GAAQxI,GACtB,IAAMsH,EAAOE,EAAQxH,GACrB,OAAOsH,GAAQA,EAAKmB,KCFf,SAASC,GAAc1I,GAC5B,IAAMoI,EAAMD,GAAOnI,GACnB,OAAOoI,GAAOA,EAAIO,WCFb,SAASC,GAAU5I,GAExB,QADiBuI,GAAYvI,GCGxB,IAAM6I,GAAW,CAAElF,QCHnB,WAA2C,IAAvB3D,EAAsB,uDAAd,KAAMC,EAAQ,uCAC/C,OAAQA,EAAOI,MACb,IhBLuB,cgBMrB,MCLG,GDML,IdPwB,ecQtB,OAAOkH,EAAkBvH,EAAOC,GAClC,QACE,OAAOD,IDJkC4G,WGHjB,SAAArB,GAAK,OAAI,SAAAsB,GAAI,OAAI,SAAA5G,GAG7C,OAFA4G,EAAK5G,GAEGA,EAAOI,MACb,IpBPsB,aoBQpB,OCLC,SAA6BkF,EAAOtF,GAApC,iBAAAuF,EAAAC,OAAA,uDACGsB,EAAa9G,EAAb8G,SADH,WAAAvB,EAAA,MAEgBrB,EAAIC,IAAJ,0BAA2B2C,KAF3C,OAECrF,EAFD,OAGL6D,EAAM7C,SAAS2E,EAAY3F,IAHtB,qCDKMoH,CAAcvD,EAAOtF,GAC9B,InBTsB,amBUpB,OERC,SAA6BsF,EAAOtF,GAApC,eAAAuF,EAAAC,OAAA,gDACGsB,EAAa9G,EAAb8G,SACRxB,EAAM7C,SAASoE,EAAUC,IAFpB,qCFQMgC,CAAcxD,EAAOtF,GAC9B,IjBXoB,WiBYlB,OGRC,SAA2BsF,EAAOtF,GAAlC,mBAAAuF,EAAAC,OAAA,uDACG0B,EAAqBlH,EAArBkH,QAASC,EAAYnH,EAAZmH,QADZ,oBAAA5B,EAAA,MAGgBrB,EAAIc,IAAI,eAAgB,CAAEkC,UAASC,aAHnD,QAGGE,EAHH,QAIMP,UACPxB,EAAM7C,SAAS2E,EAAYC,IAC3B/B,EAAM7C,SAASnC,EAAa,wBACvBgF,EAAM7C,SAASnC,EAAa,8BAPhC,gDASHgF,EAAM7C,SAASnC,EAAa,KAAEyE,KAAKgE,UAThC,wDHQMC,CAAY1D,EAAOtF,QIXzB,SAASiJ,KACd,MAAO,CACL7I,KAHwB,gBCCrB,SAAS8I,KACd,MAAO,CACL9I,KAHuB,4BCCpB,SAAS+I,KACd,MAAO,CACL/I,KAHyB,qBCCtB,SAASgJ,GAAWC,EAAUjJ,EAAM2C,GACzC,MAAO,CACL3C,KAHuB,mBAIvBkJ,QAAS,CACPD,WACAjJ,OACA2C,UCLC,SAASuE,GAAkBvH,EAAOC,GAAS,IAI1CuJ,EAAYnI,EAHDpB,EAATqH,KACcmC,SAEc,YAIpC,OAHA1I,OAAOC,KAAKwI,GAAWvI,SAAQ,SAAAqI,GAC7BE,EAAUF,GAAYxH,EAAQ0H,EAAUF,GAAW,WAE9CE,ECVF,SAASE,GAAiB1J,EAAOC,GAAS,IACvCsJ,EAAYtJ,EAAZsJ,QACAD,EAAmBC,EAAnBD,SAAUjJ,EAASkJ,EAATlJ,KAClB,OAAO,eACFL,EADL,eAEGsJ,EAFH,eAGOtJ,EAAMsJ,GAHb,eAIKjJ,EAJL,eAKUL,EAAMsJ,IAAatJ,EAAMsJ,GAAUjJ,GAL7C,GAMSkJ,OCTJ,SAASI,GAAY3J,GAC1B,OAAOA,EAAM4J,aCCf,IAAM7B,GAAQ,GCAP,SAAS8B,GAAiB7J,EAA1B,GAAsD,IAAnBsJ,EAAkB,EAAlBA,SAAUjJ,EAAQ,EAARA,KAElD,ODDK,SAA2BL,EAA3B,GAAiD,IAAbsJ,EAAY,EAAZA,SAEzC,OADiBK,GAAY3J,GACbsJ,IAAavB,GCFZ+B,CAAkB9J,EAAO,CAAEsJ,aAC5BjJ,GCDlB,SAAS0J,GAAgBvE,EAAGc,GAC1B,OAAId,EAAE8D,SAAWhD,EAAEgD,UAAkB,EACjC9D,EAAE8D,SAAWhD,EAAEgD,SAAiB,EAChC9D,EAAEnF,KAAOiG,EAAEjG,MAAc,EACzBmF,EAAEnF,KAAOiG,EAAEjG,KAAa,EACrB,EAGF,IAAM2J,GAAexD,YAAemD,IAAa,SAAAF,GAAQ,OAC9D1I,OAAOC,KAAKyI,GACTQ,SAAQ,SAAAX,GAAQ,OAAIvI,OAAO0F,OAAOgD,EAASH,OAC3C5C,KAAKqD,OCXH,SAASG,GAAgBZ,EAAUjJ,EAAM8J,GAC9C,IAAMZ,EAAU1G,EAAUgH,GAAkB,CAAEP,WAAUjJ,SAGxD,MAAO,CAFOkJ,EAAUA,EAAQvG,MAAQmH,EACvB/H,EAAYiH,GAAYC,EAAUjJ,ICC9C,IAAM+J,GAAmB,CAC9BzG,QCJK,WAAiD,IAArB3D,EAAoB,uDAAZ,GAAIC,EAAQ,uCACrD,OAAQA,EAAOI,MACb,IhCNwB,egCOtB,OAAOkH,GAAkBvH,EAAOC,GAClC,ITRuB,mBSSrB,OAAOyJ,GAAiB1J,EAAOC,GACjC,QACE,OAAOD,IDFX4G,WENoC,SAAArB,GAAK,OAAI,SAAAsB,GAAI,OAAI,SAAA5G,GAGrD,OAFA4G,EAAK5G,GAEGA,EAAOI,MACb,IbPwB,eaQtB,OCHC,SAA+BkF,EAAOtF,GAAtC,qBAAAuF,EAAAC,OAAA,uDACCzF,EAAQuF,EAAM8E,WACdtD,EAAWwB,GAAYvI,GACvByJ,EAAWO,GAAahK,GAHzB,WAAAwF,EAAA,MAKgBrB,EAAIH,KAAJ,0BACA+C,EADA,YAEnB0C,IAPG,OAKC/H,EALD,OASL6D,EAAM7C,SAASnC,EAAa,kBAC5BgF,EAAM7C,SAAS2E,EAAY3F,IAVtB,qCDGM4I,CAAgB/E,GACzB,IZTuB,2BYUrB,OENC,SAA8BA,EAAOtF,GAArC,qBAAAuF,EAAAC,OAAA,uDACCzF,EAAQuF,EAAM8E,WACdtD,EAAWwB,GAAYvI,GACvByJ,EAAWO,GAAahK,GAHzB,WAAAwF,EAAA,MAKcrB,EAAIc,IAAJ,0BAA2B8B,EAA3B,SAA4C0C,IAL1D,OAKCnC,EALD,OAML/B,EAAM7C,SAAS2E,EAAYC,IANtB,qCFMMiD,CAAehF,GACxB,IXXyB,oBWYvB,OGPC,SAAgCA,EAAOtF,GAAvC,mBAAAuF,EAAAC,OAAA,uDACCzF,EAAQuF,EAAM8E,WACdtD,EAAWwB,GAAYvI,GACvByJ,EAAWO,GAAahK,GAHzB,WAAAwF,EAAA,MAKCrB,EAAIc,IAAJ,0BAA2B8B,EAA3B,aAAgD0C,IALjD,OAMLlE,EAAM7C,SAASnC,EAAa,eANvB,qCHOMiK,CAAiBjF,QIXvB,SAASkF,GAAQC,GACtB,MAAO,CACLrK,KAHoB,gBAIpBqK,QCJG,SAASC,GAAc3K,EAAOC,GAAS,IACpCyK,EAASzK,EAATyK,KACR,OAAO,eAAK1K,EAAZ,GAAsB0K,GCCjB,SAASE,KAA8C,IAAnC5K,EAAkC,uDAA1B,CAAE6K,KAAM,QAAU5K,EAAQ,uCAC3D,OAAQA,EAAOI,MACb,IFLoB,gBEMlB,OAAOsK,GAAc3K,EAAOC,GAC9B,QACE,OAAOD,GAIE4K,I,6LCPf,IAAME,GAAYC,aAAH,MAQR,SAASC,GAAT,GAAqD,IAArCC,EAAoC,EAApCA,SAAUP,EAA0B,EAA1BA,KAA0B,IAApBQ,iBAAoB,MAAR,KAAQ,EACnDC,EAAa/I,EAAYqI,GAASC,GAExC,OACE,0BAAMQ,UAAWE,aAAGN,GAAWI,GAAY5H,QAAS6H,GACjDF,GClBA,SAASI,GAAQrL,EAAOsL,GAC7B,OAAOtL,EAAM0K,KAAKY,GCEb,ICIMC,GAAW,CACtBpI,QACAgD,OACAmB,QACAsC,gBACA4B,SCV0B,CAC1B5E,WFAgC,SAAArB,GAAK,OAAI,SAAAsB,GAAI,OAAI,SAAA5G,GAGjD,OAFA4G,EAAK5G,GAEGA,EAAOI,MACb,I1CPwB,e0CQtB,OGNC,SAA+BkF,EAAOtF,GAAtC,SAAAuF,EAAAC,OAAA,gDACLF,EAAM7C,SAAS+H,GAAQ,CAAEI,KAAM,OAAQ5C,YAAa,QAD/C,qCHMMwD,CAAgBlG,QCK3BmF,KGPsB,CAAE/G,QAASiH,K,kFCD5B,SAASc,KACd,IAAM1F,EAAOnD,EAAU0D,GACjBoF,EAASvJ,EAAYqI,GAAS,CAAEI,KAAM,SACtCe,EAAUxJ,EAAY0B,GAG5B,OAFA+H,oBAAUD,EAAS,IAGjB,kBAACE,GAAA,EAAD,KACE,6BACA,kBAACC,GAAA,EAAD,KACE,kBAACA,GAAA,EAAWC,KAAZ,CAAiB1I,QAASqI,GAA1B,QACA,kBAACI,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GAAvB,SAEF,2CACA,4BACGjG,EAAKoC,KAAI,SAAAnC,GAAC,OACT,wBAAItE,IAAKsE,EAAE/B,IACT,kBAAC8G,GAAD,CAAMN,KAAM,CAAE7G,OAAQoC,EAAE/B,KAAO+B,EAAEiG,a,u4CCf7C,IAAMC,GAAgBpB,aAAH,MA8DZ,SAASqB,GAAT,GAA+B,IAAXvI,EAAU,EAAVA,OACnBG,EAAOnB,EAAUuD,EAAS,CAAEvC,WAC5B8H,EAASvJ,EAAYqI,GAAS,CAAEI,KAAM,SACtCwB,EAASjK,EAAYqI,GAAS,CAAE5G,OAAQ,OACxC+H,EAAUxJ,EAAYwB,EAAWC,GACvCgI,oBAAUD,EAAS,IAEnB,IAAMU,EACJ,kBAACC,GAAA,EAAD,CAAQC,QAAQ,OAAOlJ,QAAS+I,GAAhC,sBAKF,OACE,kBAACP,GAAA,EAAD,KACE,6BACA,kBAACC,GAAA,EAAD,KACE,kBAACA,GAAA,EAAWC,KAAZ,CAAiB1I,QAASqI,GAA1B,QACA,kBAACI,GAAA,EAAWC,KAAZ,CAAiB1I,QAAS+I,GAA1B,QACA,kBAACN,GAAA,EAAWC,KAAZ,CAAiBC,QAAM,GAAEjI,EAAKkI,QAEhC,kBAACO,GAAA,EAAD,CAAMvH,MAAI,EAACwH,GAAG,QAAQxB,UAAWiB,IAC/B,kBAAC,KAAD,CAAeQ,OAAQ3I,EAAKkB,KAAM0H,YAAY,KAE/CN,G,cC3FP,IAGaO,GAAiB,CAC5BC,SAJe,EAKfzM,KAJW,OAKX0M,QCHK,YAAkC,IAAXC,EAAU,EAAVA,OACtBvE,EAAO5F,EAAU2F,IADe,EAGN0B,GAAgB8C,EAAO9I,GAAI,YAAa,IAHlC,mBAG/B+I,EAH+B,KAGrBC,EAHqB,KAIhCC,EAAaxK,uBAAY,SAAAyK,GAAE,OAAIF,EAAYE,EAAGC,OAAOrK,SAAQ,CACjEkK,IALoC,EAQEhD,GACtC8C,EAAO9I,GACP,gBACA,IAXoC,mBAQ/BoJ,EAR+B,KAQjBC,EARiB,KAahCC,EAAiB7K,uBAAY,SAAAyK,GAAE,OAAIG,EAAgBH,EAAGC,OAAOrK,SAAQ,CACzEuK,IAdoC,EAiBVrD,GAAgB8C,EAAO9I,GAAI,cAAe,GAjBhC,mBAiB/BuJ,EAjB+B,KAiBvBC,EAjBuB,KAkBhCC,EAAWhL,uBAAY,SAAAyK,GAAE,OAAIM,EAAUN,EAAGC,OAAOrK,SAAQ,CAAC0K,IAEhE,OACE,oCACE,kBAACjB,GAAA,EAAKmB,KAAN,KACE,kBAACC,GAAA,EAAKC,MAAN,CAAYC,UAAU,eACpB,kBAACF,GAAA,EAAKG,MAAN,sBACA,kBAACH,GAAA,EAAKI,QAAN,CACE5N,KAAK,OACL2C,MAAOiK,EACPiB,SAAUf,EACVgB,YAAY,gBAGhB,kBAACN,GAAA,EAAKC,MAAN,CAAYC,UAAU,mBACpB,kBAACF,GAAA,EAAKG,MAAN,0BACA,kBAACH,GAAA,EAAKI,QAAN,CACE5N,KAAK,OACL2C,MAAOsK,EACPY,SAAUV,EACVW,YAAY,oBAGN,UAAT1F,GACC,kBAACoF,GAAA,EAAKC,MAAN,CAAYC,UAAU,eACpB,kBAACF,GAAA,EAAKG,MAAN,qBACA,kBAACH,GAAA,EAAKI,QAAN,CACEjL,MAAOyK,EACPS,SAAUP,EACVQ,YAAY,yBD3CxBC,YENK,YAAsC,IAAXpB,EAAU,EAAVA,OAE9BqB,EAMErB,EANFqB,KACAC,EAKEtB,EALFsB,WACAC,EAIEvB,EAJFuB,cACAxH,EAGEiG,EAHFjG,SACAyH,EAEExB,EAFFwB,SACAC,EACEzB,EADFyB,gBAGF,OACE,oCACE,kBAAChC,GAAA,EAAKiC,OAAN,CAAanL,cAAY,OAAO2H,UAAU,cAA1C,gBACU,8BAAOmD,IAEjB,kBAAC5B,GAAA,EAAKmB,KAAN,KACG7G,GACC,yBAAKxD,cAAY,SACf,yCADF,KAC2BwD,EAD3B,KAIa,MAAduH,GACC,6BACE,8CADF,IAC+B,IAC7B,0BAAM/K,cAAY,cAAc+K,GAFlC,IAGE,0BAAM/K,cAAY,sBAAsBgL,IAG/B,MAAZC,GACC,6BACE,4CADF,IAC6B,IAC3B,0BAAMjL,cAAY,yBAAyBiL,GAF7C,IAGE,0BAAMjL,cAAY,oBAAoBkL,GAHxC,S,UC5BH,SAASE,GAAT,GAAsC,IAAD,EAChBzE,GADgB,EAAV8C,OACiB9I,GAAI,YADX,mBACnC0K,EADmC,KACxBC,EADwB,KAEpCC,EAAWnM,uBAAY,kBAAMkM,EAAK,UAAS,CAACA,IAC5CE,EAASpM,uBAAY,kBAAMkM,EAAK,QAAO,CAACA,IACxCG,EAAWrM,uBAAY,kBAAMkM,EAAK,UAAS,CAACA,IAC5CI,EAAYtM,uBAAY,kBAAMkM,EAAK,WAAU,CAACA,IAEpD,OACE,kBAACpC,GAAA,EAAKmB,KAAN,kBAEE,kBAACsB,GAAA,EAAD,KACE,kBAAC3C,GAAA,EAAD,CACEjJ,QAASwL,EACTvL,cAAY,UACZ0I,OAAsB,SAAd2C,GAHV,KAOA,kBAACrC,GAAA,EAAD,CACEjJ,QAASyL,EACTxL,cAAY,QACZ0I,OAAsB,OAAd2C,GAHV,KAOA,kBAACrC,GAAA,EAAD,CACEjJ,QAAS0L,EACTzL,cAAY,UACZ0I,OAAsB,SAAd2C,GAHV,KAOA,kBAACrC,GAAA,EAAD,CACEjJ,QAAS2L,EACT1L,cAAY,WACZ0I,OAAsB,UAAd2C,GAHV,OCjCR,ICEMO,GAAc,CAClBC,GCD4B,CAC5BtC,SAJe,EAKfzM,KAJW,OAKX0M,QCHK,YAAkC,IAAXC,EAAU,EAAVA,OAAU,EACd9C,GAAgB8C,EAAO9I,GAAI,WAAY,GADzB,mBAC/BmL,EAD+B,KACzBC,EADyB,KAEhCC,EAAS5M,uBAAY,SAAAyK,GAAE,OAAIkC,EAAQlC,EAAGC,OAAOrK,SAAQ,CAACsM,IAE5D,OACE,oCACE,kBAAC7C,GAAA,EAAKmB,KAAN,KACE,kBAACC,GAAA,EAAKC,MAAN,CAAYC,UAAU,YACpB,kBAACF,GAAA,EAAKG,MAAN,aACA,kBAACH,GAAA,EAAKI,QAAN,CACEjL,MAAOqM,EACPnB,SAAUqB,EACVpB,YAAY,uBAIlB,kBAACQ,GAAD,CAAiB3B,OAAQA,MDZ7BoB,YENK,YAAsC,IAAXpB,EAAU,EAAVA,OACxBqB,EAAmDrB,EAAnDqB,KAAMC,EAA6CtB,EAA7CsB,WAAYC,EAAiCvB,EAAjCuB,cAAeiB,EAAkBxC,EAAlBwC,KAAMC,EAAYzC,EAAZyC,QAE/C,OACE,oCACE,kBAAChD,GAAA,EAAKiC,OAAN,CAAanL,cAAY,OAAO2H,UAAU,cAA1C,gBACU,8BAAOmD,IAEjB,kBAAC5B,GAAA,EAAKmB,KAAN,KACiB,MAAdU,GACC,6BACE,8CADF,IAC+B,IAC7B,0BAAM/K,cAAY,cAAc+K,GAFlC,IAGE,0BAAM/K,cAAY,sBAAsBgL,IAGnC,MAARiB,GACC,6BACE,wCADF,KACyB,0BAAMjM,cAAY,QAAQiM,GADnD,IAEE,0BAAMjM,cAAY,uBAAuBkM,QJhBnB,CAChC3C,SAJe,EAKfzM,KAJW,WAKX0M,QKLK,YAAsC,IAAXC,EAAU,EAAVA,OAAU,EACV9C,GAAgB8C,EAAO9I,GAAI,YAAa,IAD9B,mBACnC+I,EADmC,KACzBC,EADyB,KAEpCC,EAAaxK,uBAAY,SAAAyK,GAAE,OAAIF,EAAYE,EAAGC,OAAOrK,SAAQ,CACjEkK,IAGF,OACE,oCACE,kBAACT,GAAA,EAAKmB,KAAN,KACE,kBAACC,GAAA,EAAKC,MAAN,CAAYC,UAAW,cAAgBf,EAAO9I,IAC5C,kBAAC2J,GAAA,EAAKG,MAAN,sBACA,kBAACH,GAAA,EAAKI,QAAN,CACE5N,KAAK,OACL2C,MAAOiK,EACPiB,SAAUf,EACVgB,YAAY,mBLTtBC,YMPK,YAA0C,IAAXpB,EAAU,EAAVA,OAC5BqB,EAAkCrB,EAAlCqB,KAAMtH,EAA4BiG,EAA5BjG,SAAUyI,EAAkBxC,EAAlBwC,KAAMC,EAAYzC,EAAZyC,QAE9B,OACE,oCACE,kBAAChD,GAAA,EAAKiC,OAAN,CAAanL,cAAY,OAAO2H,UAAU,cAA1C,oBACc,8BAAOmD,IAErB,kBAAC5B,GAAA,EAAKmB,KAAN,KACG7G,GACC,yBAAKxD,cAAY,SACf,yCADF,KAC2BwD,EAD3B,KAIO,MAARyI,GACC,6BACE,wCADF,KACyB,0BAAMjM,cAAY,QAAQiM,GADnD,IAEE,0BAAMjM,cAAY,uBAAuBkM,SLVnD/I,MAAK,SAAClB,EAAGc,GAAJ,OAAUd,EAAEsH,SAAWxG,EAAEwG,YAE1B4C,GAAoB5N,EAAQqN,GAAa,QMTxC,SAASQ,GAAT,GAAiC,IAAbjI,EAAY,EAAZA,SACzB,OACE,oCACGyH,GAAYlF,SAAQ,SAAA2F,GAAU,OAC7BlI,EACG/B,QAAO,SAAAiC,GAAC,OAAIA,EAAEvH,OAASuP,EAAWvP,QAClC+H,KAAI,SAAA4E,GAAM,OAAI,kBAAC6C,GAAD,CAAQ7C,OAAQA,EAAQrL,IAAKqL,EAAO9I,YCHtD,SAAS2L,GAAT,GAA6B,IAAX7C,EAAU,EAAVA,OACfqB,EAAyBrB,EAAzBqB,KAAMhO,EAAmB2M,EAAnB3M,KAAM0G,EAAaiG,EAAbjG,SADa,EPQnC,SAAuBiG,GACrB,OAAO0C,GAAkB1C,EAAO3M,MOPCyP,CAAc9C,GAAvCoB,EAFyB,EAEzBA,YAAarB,EAFY,EAEZA,QACfgD,EAAkBlN,EAAU0F,IAElC,OACE,oCACE,kBAACkE,GAAA,EAAD,CAAMlJ,cAAA,UAAgBlD,EAAhB,YAAwBgO,IAC5B,kBAACD,EAAD,CAAapB,OAAQA,IACpBjG,IAAagJ,GAAmB,kBAAChD,EAAD,CAASC,OAAQA,KAEpD,8BCZC,SAASgD,KACd,IAAMC,EAAS7N,EAAYqI,GAAS,CAAExC,YAAa,OAC7CA,EAAcpF,EAAUwI,GAAS,eACjC3D,EAAW7E,EAAUmF,EAA0BC,GAErD,OAAOiI,mBAAQ,WACb,OACE,oCACGjI,GAAe,4BAAQ3E,QAAS2M,GAAjB,QAChB,kBAACN,GAAD,CAAUjI,SAAUA,OAGvB,CAACO,EAAaP,EAAUuI,I,uBCZtB,SAASE,KAAa,IAAD,EACMC,mBAAS,IADf,mBACnBrJ,EADmB,KACTsJ,EADS,KAEpBC,EAAa3N,uBAAY,SAAAyK,GAAE,OAAIiD,EAAYjD,EAAGC,OAAOrK,SAAQ,CACjEqN,IAGIE,EAAgBnO,EAAY4E,GAC5BwJ,EAAW7N,uBACf,SAAAyK,GACEmD,EAAcxJ,GACdqG,EAAGqD,mBAEL,CAACF,EAAexJ,IAGlB,OACE,kBAAC+E,GAAA,EAAD,KACE,6BACA,6BACA,8CACA,6BACA,kBAAC4E,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAKC,GAAI,GACP,kBAAC/C,GAAA,EAAD,CAAM2C,SAAUA,GACd,kBAAC3C,GAAA,EAAKC,MAAN,CAAYC,UAAU,YACpB,kBAACF,GAAA,EAAKG,MAAN,iBACA,kBAACH,GAAA,EAAKI,QAAN,CACE5N,KAAK,OACL2C,MAAO+D,EACPmH,SAAUoC,EACVnC,YAAY,oBAGhB,kBAAC5B,GAAA,EAAD,CAAQC,QAAQ,UAAUnM,KAAK,UAA/B,c,mWC1BZ,IAAMwQ,GAAgB9F,aAAH,KCZO,EACC,GD4BpB,SAAS+F,GAAT,GAAmC,IAAhBjJ,EAAe,EAAfA,IAAKC,EAAU,EAAVA,OACvBiJ,EAASlO,EAAUqF,GAA+B,CAAEL,MAAKC,WACzDJ,EAAW7E,EAAUmF,EAA0B,CAAEH,MAAKC,WACtDf,EAAWlE,EAAU0F,IACrByI,EAAc5O,EAAYqI,GAAS,CAAExC,YAAa,CAAEJ,MAAKC,YACzDG,EAAcpF,EAAUwI,GAAS,eAEvC,OAAO6E,mBAAQ,WACb,IAAMe,EAAQ,CACZC,MAAM,GAAD,OCtCe,EDsCf,MACLC,OAAO,GAAD,OCtCe,EDsCf,MACNC,KAAK,GAAD,OCxCgB,GDwCGtJ,EAAS,GAA5B,MACJuJ,IAAI,GAAD,OCxCkB,GDwCExJ,EAAM,GAA1B,MACHyJ,SAAU,YAINC,EAAW,GACbR,EAAM,UACRQ,EAAS1P,KACP,0BAAM0B,cAAY,YAAY5B,IAAI,YAAYuJ,UAAU,gBAAxD,WAKA6F,EAAM,MACRQ,EAAS1P,KACP,0BAAM0B,cAAY,OAAO5B,IAAI,OAAOuJ,UAAU,gBAA9C,WAKA6F,EAAM,MACRQ,EAAS1P,KACP,0BAAM0B,cAAY,QAAQ5B,IAAI,QAAQuJ,UAAU,gBAAhD,WAMJ,IAAIA,EAAY2F,GAahB,OAZInJ,EAAS8J,MAAK,SAAA5J,GAAC,OAAIA,EAAEb,WAAaA,OACpCmE,GAAa,UAIbjD,GACAA,EAAYJ,MAAQA,GACpBI,EAAYH,SAAWA,IAEvBoD,GAAa,gBAIb,yBACE3H,cAAA,UAAgBsE,EAAhB,YAAuBC,GACvBmJ,MAAOA,EACP/F,UAAWA,EACX5H,QAAS0N,EACT9E,MAAK,UAAKrE,EAAL,YAAYC,IAEhByJ,KAGJ,CAACtJ,EAAaJ,EAAKC,EAAQiJ,EAAQrJ,EAAUX,EAAUiK,IExFrD,SAASS,KACd,IAAMrJ,EAAMvF,EAAUsF,IAEtB,OAAO+H,mBAAQ,WACb,IAAMe,EAAQ,CACZC,MAAM,GAAD,ODVe,ECUG9I,EAAIsJ,QAAtB,MACLP,OAAO,GAAD,ODVe,ECUI/I,EAAIuJ,KAAvB,MACNL,SAAU,WACVM,WAAY,iBACZC,OAAQ,cAGV,OACE,yBAAKtO,cAAY,kBAAkB0N,MAAOA,GACvClP,EAAM,EAAGqG,EAAIuJ,MAAM1H,SAAQ,SAAApC,GAAG,OAC7B9F,EAAM,EAAGqG,EAAIsJ,SAAStJ,KAAI,SAAAN,GAAM,OAC9B,kBAACgJ,GAAD,CAASjJ,IAAKA,EAAKC,OAAQA,EAAQnG,IAAG,UAAKkG,EAAL,YAAYC,cAKzD,CAACM,I,cCrBN,SAAS0J,GAAT,GAA+B,IAAZ9I,EAAW,EAAXA,QACTf,EAAsBe,EAAtBf,YAAa/H,EAAS8I,EAAT9I,KACf6R,EAAK3P,EAAYqI,GAAS,CAAExC,gBAElC,OAAO,kBAAC+J,GAAA,EAAUhG,KAAX,CAAgB1I,QAASyO,GAAK7R,GAGhC,SAAS+R,KACd,IAAM3J,EAAWzF,EAAUwF,IAE3B,OAAO6H,mBACL,kBACE,kBAAC8B,GAAA,EAAD,CAAWzO,cAAY,YACpB+E,EAASF,KAAI,SAACY,EAASkJ,GAAV,OACZ,kBAACJ,GAAD,CAASnQ,IAAKuQ,EAAOlJ,QAASA,UAIpC,CAACV,I,aClBL,SAAS6J,GAAT,GAAoD,IAA/BD,EAA8B,EAA9BA,MAAOE,EAAuB,EAAvBA,WAAYhL,EAAW,EAAXA,QAChCiL,EAASjL,EAAQ8K,GACjBI,EAAY3P,uBAChB,SAAA4P,GACE,IAAMC,EAAI,aAAOpL,GACjBoL,EAAKN,GAAL,eAAmB9K,EAAQ8K,GAA3B,GAAsCK,GACtCH,EAAWI,KAEb,CAACpL,EAAS8K,EAAOE,IAEb9B,EAAa3N,uBACjB,SAAAyK,GAAE,OAAIkF,EAAU,CAAEvL,SAAUqG,EAAGC,OAAOrK,UACtC,CAACsP,IAEGG,EAAS9P,uBAAY,SAAAyK,GAAE,OAAIkF,EAAU,CAAE7J,KAAM2E,EAAGC,OAAOrK,UAAU,CACrEsP,IAGII,EAAO,gBAAYR,EAAQ,GAC3BS,EAAK,cAAUT,EAAQ,GAC7B,OACE,kBAACxB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAAC9C,GAAA,EAAKC,MAAN,CAAYC,UAAW2E,GACrB,kBAAC7E,GAAA,EAAKG,MAAN,eAAoBkE,EAAQ,GAC5B,kBAACrE,GAAA,EAAKI,QAAN,CACE5N,KAAK,OACL2C,MAAOqP,EAAOtL,SACdmH,SAAUoC,EACVjC,KAAMqE,EACNvE,YAAY,6BAIlB,kBAACwC,GAAA,EAAD,KACE,kBAAC9C,GAAA,EAAKC,MAAN,CAAYC,UAAW4E,GACrB,kBAAC9E,GAAA,EAAKG,MAAN,aAAkBkE,EAAQ,GAC1B,kBAACrE,GAAA,EAAKI,QAAN,CACE2E,GAAG,SACH5P,MAAOqP,EAAO5J,KACdyF,SAAUuE,EACVpE,KAAMsE,GAEN,yCACA,6CACA,6CCvCL,SAASE,KACd,IAAM9L,EAAWlE,EAAU0F,IACrBE,EAAO5F,EAAU2F,IACjBG,EAAa9F,EAAU6F,IACvBoK,EAAS1Q,EAAY+G,IACrB4J,EAAY3Q,EAAY8G,IAE9B,OACE,kBAAC4C,GAAA,EAAD,KACE,kBAACS,GAAA,EAAD,CAAQjJ,QAASwP,GAAjB,QACC,MACD,kBAACvG,GAAA,EAAD,CAAQjJ,QAASyP,GAAjB,WACC,MAJH,SAKQ,0BAAMxP,cAAY,sBAAsBoF,GAC7C,MANH,WAOU,0BAAMpF,cAAY,oBAAoBwD,GAC7C,MARH,SASQ,0BAAMxD,cAAY,gBAAgBkF,ICzBvC,ICCqB6C,GAAO0H,GDDtBC,ICCe3H,GDDQ,QCCD0H,GDDS,CAC1CE,KEDK,WACL,OACE,kBAACpH,GAAA,EAAD,KACE,0CFDJqH,KGCK,WACL,IAAMC,EAASvQ,EAAU+F,IACnBX,EAAcpF,EAAUwI,GAAS,eAEvC,OAAK+H,EAEH,oCACE,kBAACP,GAAD,MACA,kBAACnC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACc,GAAD,OAEF,kBAACd,GAAA,EAAD,MACI1I,GAAe,kBAACgK,GAAD,MAChBhK,GAAe,kBAAC+H,GAAD,SAVJ,kBAACG,GAAD,OHJpBkD,KIIK,WACL,IAAMtM,EAAWlE,EAAU0F,IACrB+K,EAASlR,EAAYgH,IACrB2J,EAAY3Q,EAAY8G,IACxBqK,EAAWnR,EAAY6E,GAE7B,OAAKF,EAEH,kBAAC+E,GAAA,EAAD,KACE,kBAACS,GAAA,EAAD,CAAQjJ,QAASgQ,GAAjB,aACA,kBAAC/G,GAAA,EAAD,CAAQjJ,QAASyP,GAAjB,gBACA,kBAACxG,GAAA,EAAD,CAAQjJ,QAASiQ,GAAjB,WALkB,2BJTtBC,IFmDK,WAAoB,IAAD,EACMpD,mBAAS,IADf,mBACjBjJ,EADiB,KACRsM,EADQ,KAElBC,EAAY/Q,uBAAY,SAAAyK,GAAE,OAAIqG,EAAWrG,EAAGC,OAAOrK,SAAQ,IAFzC,EAIMoN,mBAAS,IAJf,mBAIjBhJ,EAJiB,KAIRgL,EAJQ,KAKlBuB,EAAYhR,uBAChB,kBAAMyP,EAAW,GAAD,oBAAKhL,GAAL,CAAc,CAAEL,SAAU,GAAI0B,KAAM,cACpD,CAACrB,IAGGwM,EAAkBxR,EAAY8E,GAC9BsJ,EAAW7N,uBACf,SAAAyK,GACEwG,EAAgBzM,EAASC,GACzBgG,EAAGqD,mBAEL,CAACmD,EAAiBzM,EAASC,IAG7B,OACE,kBAAC0E,GAAA,EAAD,KACE,6BACA,6BACA,qDACA,6BACA,kBAAC4E,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAKC,GAAI,GACP,kBAAC/C,GAAA,EAAD,CAAM2C,SAAUA,GACd,kBAAC3C,GAAA,EAAKC,MAAN,CAAYC,UAAU,WACpB,kBAACF,GAAA,EAAKG,MAAN,iBACA,kBAACH,GAAA,EAAKI,QAAN,CACE5N,KAAK,OACL2C,MAAOmE,EACP+G,SAAUwF,EACVrF,KAAMlH,EACNgH,YAAY,wBAGf/G,EAAQgB,KAAI,SAACiK,EAAQH,GAAT,OACX,kBAACC,GAAD,CACExQ,IAAKuQ,EACLA,MAAOA,EACPE,WAAYA,EACZhL,QAASA,OAGb,kBAACmF,GAAA,EAAD,CAAQC,QAAQ,YAAYlJ,QAASqQ,GAArC,cAEU,IACV,kBAACpH,GAAA,EAAD,CAAQC,QAAQ,UAAUnM,KAAK,UAA/B,eEnGVwT,KKHK,WACL,IAAMhQ,EAAShB,EAAUwI,GAAS,UAClC,OAAIxH,EAAe,kBAACuI,GAAD,CAAUvI,OAAQA,IAC9B,kBAAC6H,GAAD,SJHDoI,KAAOd,GAAMc,MAAQd,GAAM9Q,UACjC8Q,GAAM9Q,UAAY8Q,GAAM9Q,WAAa8Q,GAAMc,KAM3C,WACE,IAAMC,EAAWlR,EAAUwI,GAASC,IAC9B0I,EAAOhB,GAAM,GAAD,OAAIe,KANxB,SAAyBA,GACvB,OAAO,8CAA4BA,EAA5B,kBAA8CzI,GAA9C,OAK8B2I,CAAgBF,GAErD,OAAO,kBAACC,EAAD,QKZJ,SAASE,GAAT,GAAkC,IAAbjJ,EAAY,EAAZA,SAC1B,OACE,oCACE,kBAACkJ,GAAD,MACA,kBAACzF,GAAD,MACA,kBAAC,EAAD,MACCzD,G,wBCJA,SAASyD,KACd,IAAM/C,EAASvJ,EAAYqI,GAAS,CAAEI,KAAM,SACtCuJ,EAAShS,EAAYqI,GAAS,CAAEI,KAAM,SACtCwJ,EAAQjS,EAAYqI,GAAS,CAAEI,KAAM,QACrCwB,EAASjK,EAAYqI,GAAS,CAAEI,KAAM,SACtCuI,EAASvQ,EAAU+F,IACnB0L,EAASlS,EAAYqI,GAAS,CAAEI,KAAM,SAE5C,OACE,kBAAC0J,GAAA,EAAD,CAAQ7H,GAAG,QAAQ8H,OAAO,KAAKjR,cAAY,UACzC,kBAACuI,GAAA,EAAD,KACE,kBAACyI,GAAA,EAAOE,MAAR,CAAcnR,QAASqI,GAAvB,6BACA,kBAAC4I,GAAA,EAAOG,OAAR,CAAeC,gBAAc,qBAC7B,kBAACJ,GAAA,EAAOK,SAAR,CAAiB1Q,GAAG,oBAClB,kBAAC2Q,GAAA,EAAD,CAAK3J,UAAU,WACb,kBAAC2J,GAAA,EAAI7J,KAAL,CAAU1H,QAASqI,GAAnB,QACA,kBAACkJ,GAAA,EAAI7J,KAAL,CAAU1H,QAAS8Q,GAAnB,QACChB,GAAU,kBAACyB,GAAA,EAAI7J,KAAL,CAAU1H,QAASgR,GAAnB,QACX,kBAACO,GAAA,EAAI7J,KAAL,CAAU1H,QAAS+Q,GAAnB,OACA,kBAACQ,GAAA,EAAI7J,KAAL,CAAU1H,QAAS+I,GAAnB,YAQGqC,I,uLC7Bf,IAAMoG,GAAe/J,aAAH,MASX,SAASoJ,KACd,OACE,yBAAKjJ,UAAW4J,IACbC,GAAI1G,KADP,MACgB0G,GAAIC,QADpB,KCHgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAGMC,GCJC,SAAiBC,EAAgBC,GACtC,IAAMjQ,ECCD,SAA0BgQ,GAAuC,IAAvBC,EAAsB,uDAATC,WACtDC,EAAahV,EAAciV,KAAapK,KACxCqK,EAAgBC,KAAgBtK,IAEtC,OAAOuK,uBACLJ,EACAH,EACAC,EAAWO,2BAAgBC,KAAOJ,KDRtBK,CAAiBV,EAAgBC,GAW/C,OATA,WACE,OACE,kBAAC,IAAD,CAAUjQ,MAAOA,GACf,kBAAC2O,GAAD,KACE,kBAACjB,GAAD,SDHEiD,MAAQhU,EAFlBgT,OAAOiB,sCACPjB,OAAOiB,qCAAqC,CAAEC,OAAO,EAAMC,WAAY,MAEzEC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.15d14cbc.chunk.js","sourcesContent":["export function reduceReplaceAlert(state, action) {\n  return {\n    text: action.text,\n  };\n}\n","export const DELETE_ALERT = \"alert/DELETE_ALERT\";\nexport function deleteAlert() {\n  return {\n    type: DELETE_ALERT\n  };\n}\n","export const REPLACE_ALERT = \"alert/REPLACE_ALERT\";\nexport function replaceAlert(text) {\n  return {\n    type: REPLACE_ALERT,\n    text\n  };\n}\n","const freezeds = new WeakSet();\n\nfunction freezeState(state) {\n  if (typeof state === \"object\" && !freezeds.has(state) && state) {\n    freezeds.add(state);\n    Object.keys(state).forEach(k => {\n      const val = state[k];\n      if (typeof val === \"object\" && val !== state[k]) {\n        state[k] = freezeState(val);\n      }\n    });\n  }\n  Object.freeze(state);\n  return state;\n}\n\nexport function freezeReducer(reduce) {\n  return function(state, action) {\n    const nextState = reduce(state, action);\n    return freezeState(nextState);\n  };\n}\n","/**\n * @param {array} array\n * @param {string | function} keyOrFn\n */\nexport function groupBy(array = [], keyOrFn = \"id\") {\n  const keyFn = typeof keyOrFn === \"string\" ? o => o[keyOrFn] : keyOrFn;\n  const result = {};\n  array.forEach(o => {\n    const key = keyFn(o);\n    let items = result[key];\n    if (!items) {\n      items = [];\n      result[key] = items;\n    }\n    items.push(o);\n  });\n  return result;\n}\n","export function indexBy(array, keyOrFn = \"id\") {\n  const keyFn = typeof keyOrFn === \"string\" ? o => o[keyOrFn] : keyOrFn;\n  const result = {};\n  array.forEach(o => {\n    const key = keyFn(o);\n    result[key] = o;\n  });\n  return result;\n}\n","export function range(start, count) {\n  if (count === undefined) {\n    count = start;\n    start = 0;\n  }\n  const result = [];\n  for (let i = 0; i < count; i += 1) result.push(i + start);\n  return result;\n}\n","import { useCallback } from \"react\";\nimport { useDispatch as useDispatchRR } from \"react-redux\";\n\nexport function useDispatch(actionCreator, ...args) {\n  if (!actionCreator) throw new Error(\"The actionCreator is not a function\");\n  const dispatchRR = useDispatchRR();\n  const dispatch = useCallback(\n    (...moreArgs) => {\n      const action = actionCreator(...args, ...moreArgs);\n      dispatchRR(action);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [actionCreator, ...args],\n  );\n  return dispatch;\n}\n","import { useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nexport function useSelect(select, ...args) {\n  const selector = useCallback(\n    state => select(state, ...args),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [select, ...args],\n  );\n  const value = useSelector(selector);\n\n  return value;\n}\n","import React from \"react\";\nimport { Alert as BsAlert } from \"react-bootstrap\";\nimport { useDispatch, useSelect } from \"../../../lib\";\nimport { getAlert, deleteAlert } from \"../\";\n\nexport function Alert() {\n  const alert = useSelect(getAlert);\n  const dismiss = useDispatch(deleteAlert);\n  if (!alert) return null;\n\n  return (\n    <div onClick={dismiss} data-testid=\"alert-bar\">\n      <BsAlert onClose={dismiss} dismissible>\n        {alert.text}\n      </BsAlert>\n    </div>\n  );\n}\n","export function getAlert(state) {\n  return state.alert;\n}\n","import { reduceAlert } from \"./reducer\";\n\nexport * from \"./actions\";\nexport * from \"./components\";\nexport * from \"./selectors\";\n\nexport const alertDuck = { default: reduceAlert };\n","import { DELETE_ALERT, REPLACE_ALERT } from \"../\";\nimport { reduceDeleteAlert, reduceReplaceAlert } from \"./private\";\n\nexport function reduceAlert(state = null, action) {\n  switch (action.type) {\n    case DELETE_ALERT:\n      return reduceDeleteAlert(state, action);\n    case REPLACE_ALERT:\n      return reduceReplaceAlert(state, action);\n    default:\n      return state;\n  }\n}\n","export function reduceDeleteAlert(state, action) {\n  return null;\n}\n","export const FETCH_POST = \"blog/FETCH_POST\";\nexport function fetchPost(postId) {\n  return {\n    type: FETCH_POST,\n    postId\n  };\n}\n","export const FETCH_POST_LIST = \"blog/FETCH_POST_LIST\";\nexport function fetchPostList() {\n  return {\n    type: FETCH_POST_LIST\n  };\n}\n","export const SET_POST = \"blog/SET_POST\";\nexport function setPost(post) {\n  return {\n    type: SET_POST,\n    post\n  };\n}\n","export function reduceSetPost(state, action) {\n  const { post } = action;\n  const { id } = post;\n  return { ...state, [id]: { ...state[id], ...post } };\n}\n","const api = {\n  async get(url, options) {\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        ...(options && options.headers),\n      },\n      ...options,\n    });\n\n    const result = await response.json();\n\n    if (!response.ok)\n      return Promise.reject({\n        status: response.status,\n        data: result,\n      });\n\n    return result;\n  },\n\n  async put(url, body, options) {\n    return api.get(url, {\n      method: \"PUT\",\n      body: JSON.stringify(body),\n      ...options,\n    });\n  },\n\n  async post(url, body, options) {\n    return api.get(url, {\n      method: \"POST\",\n      body: JSON.stringify(body),\n      ...options,\n    });\n  },\n\n  async delete(url, options) {\n    return api.get(url, { method: \"DELETE\", ...options });\n  },\n};\n\nexport default api;\n","import api from \"../../../lib/api\";\nimport { setPost } from \"../actions\";\n\nfunction removeOneLineComments(body) {\n  return body\n    .split(\"\\n\")\n    .filter(line => !/^\\s*<!--.*-->\\s*$/.test(line))\n    .join(\"\\n\");\n}\n\nexport async function whenFetchPost(store, action) {\n  const { postId } = action;\n  const post = await api.get(`/api/v1/posts/${postId}`);\n  post.body = removeOneLineComments(post.body);\n  store.dispatch(setPost(post));\n}\n","import api from \"../../../lib/api\";\nimport { setPost } from \"../actions/setPost\";\n\nexport async function whenFetchPostList(store, action) {\n  const { list } = await api.get(\"/api/v1/posts\");\n  list.forEach(p => store.dispatch(setPost(p)));\n}\n","export function getBlog(state) {\n  return state.blog;\n}\n","import { getBlog } from \"./getBlog\";\n\nexport function getPost(state, { postId }) {\n  return getBlog(state)[postId];\n}\n","import { createSelector } from \"reselect\";\nimport { getBlog } from \"./getBlog\";\n\nfunction compareIds(a, b) {\n  if (a.id < b.id) return +1;\n  if (a.id > b.id) return -1;\n  return 0;\n}\n\nfunction makeListPosts() {\n  return createSelector(getBlog, blog => Object.values(blog).sort(compareIds));\n}\n\nexport const listPosts = makeListPosts();\n","import { reduceBlog } from \"./reducer\";\nimport { blogMiddleware } from \"./middleware\";\n\nexport * from \"./actions\";\nexport * from \"./selectors\";\n\nexport const blogDuck = { default: reduceBlog, middleware: blogMiddleware };\n","import { SET_POST } from \"../actions\";\nimport { reduceSetPost } from \"./private\";\n\nexport function reduceBlog(state = {}, action) {\n  switch (action.type) {\n    case SET_POST:\n      return reduceSetPost(state, action);\n    default:\n      return state;\n  }\n}\n","import { FETCH_POST, FETCH_POST_LIST } from \"../actions\";\nimport { whenFetchPost, whenFetchPostList } from \"./private\";\n\nexport const blogMiddleware = state => next => async action => {\n  next(action);\n\n  switch (action.type) {\n    case FETCH_POST:\n      return whenFetchPost(state, action);\n    case FETCH_POST_LIST:\n      return whenFetchPostList(state, action);\n    default: // nothing\n  }\n};\n","export const FETCH_GAME = \"game/FETCH\";\nexport function fetchGame(playerId) {\n  return {\n    type: FETCH_GAME,\n    playerId,\n  };\n}\n","export const LOGIN_GAME = \"game/LOGIN\";\nexport function loginGame(playerId) {\n  return {\n    type: LOGIN_GAME,\n    playerId,\n  };\n}\n","export const LOGOUT_GAME = \"game/LOGOUT\";\nexport function logoutGame() {\n  return {\n    type: LOGOUT_GAME,\n  };\n}\n","export const NEW_GAME = \"game/NEW\";\nexport function newGame(mapCode, players) {\n  return {\n    type: NEW_GAME,\n    mapCode,\n    players,\n  };\n}\n","export const REPLACE_GAME = \"game/REPLACE\";\nexport function replaceGame(game) {\n  return {\n    type: REPLACE_GAME,\n    game,\n  };\n}\n","export function reduceReplaceGame(state, action) {\n  return action.game;\n}\n","export function getGame(state) {\n  return state.game;\n}\n","import { getGame } from \"./getGame\";\n\nexport function listEntities(state) {\n  const game = getGame(state);\n  return game && game.entities;\n}\n","import { createSelector } from \"reselect\";\nimport { listEntities } from \"./listEntities\";\nimport { groupBy } from \"../../../lib\";\n\nfunction makeGetEntitiesByCoordinates() {\n  return createSelector(listEntities, entities =>\n    groupBy(entities, e => `${e.row},${e.column}`),\n  );\n}\n\nexport const getEntitiesByCoordinates = makeGetEntitiesByCoordinates();\n","import { getEntitiesByCoordinates } from \"./getEntitiesByCoordinates\";\n\nconst EMPTY = [];\nexport function listEntitiesAtCoordinate(state, coordinates) {\n  const { row, column } = coordinates;\n  return getEntitiesByCoordinates(state)[`${row},${column}`] || EMPTY;\n}\n","import { createSelector } from \"reselect\";\nimport { groupBy } from \"../../../lib\";\nimport { listEntitiesAtCoordinate } from \"./listEntitiesAtCoordinate\";\n\nfunction makeGetEntitiesAtCoordinateByType() {\n  return createSelector(listEntitiesAtCoordinate, entities =>\n    groupBy(entities, \"type\"),\n  );\n}\n\nexport const getEntitiesAtCoordinateByType = makeGetEntitiesAtCoordinateByType();\n","import { getGame } from \"./getGame\";\n\nexport function getMap(state) {\n  const game = getGame(state);\n  return game && game.map;\n}\n","import { getGame } from \"./getGame\";\n\nexport function getMessages(state) {\n  const game = getGame(state);\n  return game && game.messages;\n}\n","import { getGame } from \"./getGame\";\n\nexport function getPlayerId(state) {\n  const game = getGame(state);\n  return game && game.playerId;\n}\n","import { getGame } from \"./getGame\";\n\nexport function getRace(state) {\n  const game = getGame(state);\n  return game && game.race;\n}\n","import { getMap } from \"./getMap\";\n\nexport function getTurnNumber(state) {\n  const map = getMap(state);\n  return map && map.turnNumber;\n}\n","import { getPlayerId } from \"./getPlayerId\";\n\nexport function hasPlayer(state) {\n  const playerId = getPlayerId(state);\n  return !!playerId;\n}\n","import { reduceGame } from \"./reducer\";\nimport { gameMiddleware } from \"./middleware\";\n\nexport * from \"./actions\";\nexport * from \"./selectors\";\n\nexport const gameDuck = { default: reduceGame, middleware: gameMiddleware };\n","import { REPLACE_GAME, LOGOUT_GAME } from \"../actions\";\nimport { reduceReplaceGame, reduceLogoutGame } from \"./private\";\n\nexport function reduceGame(state = null, action) {\n  switch (action.type) {\n    case LOGOUT_GAME:\n      return reduceLogoutGame(state, action);\n    case REPLACE_GAME:\n      return reduceReplaceGame(state, action);\n    default:\n      return state;\n  }\n}\n","export function reduceLogoutGame(state, action) {\n  return {};\n}\n","import { FETCH_GAME, LOGIN_GAME, NEW_GAME } from \"../actions\";\nimport { whenFetchGame, whenLoginGame, whenNewGame } from \"./private\";\n\nexport const gameMiddleware = store => next => action => {\n  next(action);\n\n  switch (action.type) {\n    case FETCH_GAME:\n      return whenFetchGame(store, action);\n    case LOGIN_GAME:\n      return whenLoginGame(store, action);\n    case NEW_GAME:\n      return whenNewGame(store, action);\n    default: // nothing\n  }\n};\n","import api from \"../../../lib/api\";\nimport { replaceGame } from \"../actions\";\n\nexport async function whenFetchGame(store, action) {\n  const { playerId } = action;\n  const result = await api.get(`/api/v1/players/${playerId}`);\n  store.dispatch(replaceGame(result));\n}\n","import { fetchGame } from \"../actions\";\n\nexport async function whenLoginGame(store, action) {\n  const { playerId } = action;\n  store.dispatch(fetchGame(playerId));\n}\n","import api from \"../../../lib/api\";\nimport { replaceAlert } from \"../../alert\";\nimport { replaceGame } from \"../actions\";\n\nexport async function whenNewGame(store, action) {\n  const { mapCode, players } = action;\n  try {\n    const game = await api.put(\"/api/v1/game\", { mapCode, players });\n    if (game.playerId) {\n      store.dispatch(replaceGame(game));\n      store.dispatch(replaceAlert(\"Game ready to play\"));\n    } else store.dispatch(replaceAlert(\"Game created successfully\"));\n  } catch (e) {\n    store.dispatch(replaceAlert(e.data.message));\n  }\n}\n","export const COMPILE_GAME = \"game/COMPILE\";\nexport function compileGame() {\n  return {\n    type: COMPILE_GAME,\n  };\n}\n","export const NEXT_PLAYER = \"gameCommands/NEXT_PLAYER\";\nexport function nextPlayer() {\n  return {\n    type: NEXT_PLAYER,\n  };\n}\n","export const SAVE_COMMANDS = \"gameCommands/SAVE\";\nexport function saveCommands() {\n  return {\n    type: SAVE_COMMANDS,\n  };\n}\n","export const SET_COMMAND = \"gameCommands/SET\";\nexport function setCommand(entityId, type, value) {\n  return {\n    type: SET_COMMAND,\n    command: {\n      entityId,\n      type,\n      value,\n    },\n  };\n}\n","import { groupBy, indexBy } from \"../../../lib\";\n\nexport function reduceReplaceGame(state, action) {\n  const { game } = action;\n  const commands = game.commands;\n\n  const nextState = groupBy(commands, \"entityId\");\n  Object.keys(nextState).forEach(entityId => {\n    nextState[entityId] = indexBy(nextState[entityId], \"type\");\n  });\n  return nextState;\n}\n","export function reduceSetCommand(state, action) {\n  const { command } = action;\n  const { entityId, type } = command;\n  return {\n    ...state,\n    [entityId]: {\n      ...state[entityId],\n      [type]: {\n        ...(state[entityId] && state[entityId][type]),\n        ...command,\n      },\n    },\n  };\n}\n","export function getCommands(state) {\n  return state.gameCommands;\n}\n","import { getCommands } from \"./getCommands\";\n\nconst EMPTY = {};\nexport function getEntityCommands(state, { entityId }) {\n  const commands = getCommands(state);\n  return commands[entityId] || EMPTY;\n}\n","import { getEntityCommands } from \"./getEntityCommands\";\n\nexport function getEntityCommand(state, { entityId, type }) {\n  const commands = getEntityCommands(state, { entityId });\n  return commands[type];\n}\n","import { createSelector } from \"reselect\";\nimport { getCommands } from \"./getCommands\";\n\nfunction compareCommands(a, b) {\n  if (a.entityId < b.entityId) return -1;\n  if (a.entityId > b.entityId) return +1;\n  if (a.type < b.type) return -1;\n  if (a.type > b.type) return +1;\n  return 0;\n}\n\nexport const listCommands = createSelector(getCommands, commands =>\n  Object.keys(commands)\n    .flatMap(entityId => Object.values(commands[entityId]))\n    .sort(compareCommands),\n);\n","import { useDispatch, useSelect } from \"../../../lib\";\nimport { getEntityCommand, setCommand } from \"../\";\n\nexport function useCommandValue(entityId, type, fallbackValue) {\n  const command = useSelect(getEntityCommand, { entityId, type });\n  const value = command ? command.value : fallbackValue;\n  const setValue = useDispatch(setCommand, entityId, type);\n  return [value, setValue];\n}\n","import { reduceGameCommands } from \"./reducer\";\nimport { gameCommandsMiddleware } from \"./middleware\";\n\nexport * from \"./actions\";\nexport * from \"./hooks\";\nexport * from \"./selectors\";\n\nexport const gameCommandsDuck = {\n  default: reduceGameCommands,\n  middleware: gameCommandsMiddleware,\n};\n","import { REPLACE_GAME } from \"../../game\";\nimport { SET_COMMAND } from \"../actions\";\nimport { reduceSetCommand, reduceReplaceGame } from \"./private\";\n\nexport function reduceGameCommands(state = {}, action) {\n  switch (action.type) {\n    case REPLACE_GAME:\n      return reduceReplaceGame(state, action);\n    case SET_COMMAND:\n      return reduceSetCommand(state, action);\n    default:\n      return state;\n  }\n}\n","import { SAVE_COMMANDS, NEXT_PLAYER, COMPILE_GAME } from \"../actions\";\nimport { whenCompileGame, whenNextPlayer, whenSaveCommands } from \"./private\";\n\nexport const gameCommandsMiddleware = store => next => action => {\n  next(action);\n\n  switch (action.type) {\n    case COMPILE_GAME:\n      return whenCompileGame(store, action);\n    case NEXT_PLAYER:\n      return whenNextPlayer(store, action);\n    case SAVE_COMMANDS:\n      return whenSaveCommands(store, action);\n    default: // nothing\n  }\n};\n","import api from \"../../../lib/api\";\nimport { replaceAlert } from \"../../alert/actions/replaceAlert\";\nimport { getPlayerId, replaceGame } from \"../../game\";\nimport { listCommands } from \"../selectors\";\n\nexport async function whenCompileGame(store, action) {\n  const state = store.getState();\n  const playerId = getPlayerId(state);\n  const commands = listCommands(state);\n\n  const result = await api.post(\n    `/api/v1/players/${playerId}/compile`,\n    commands,\n  );\n  store.dispatch(replaceAlert(\"Game compiled\"));\n  store.dispatch(replaceGame(result));\n}\n","import api from \"../../../lib/api\";\nimport { getPlayerId, replaceGame } from \"../../game\";\nimport { listCommands } from \"../selectors\";\n\nexport async function whenNextPlayer(store, action) {\n  const state = store.getState();\n  const playerId = getPlayerId(state);\n  const commands = listCommands(state);\n\n  const game = await api.put(`/api/v1/players/${playerId}/next`, commands);\n  store.dispatch(replaceGame(game));\n}\n","import api from \"../../../lib/api\";\nimport { replaceAlert } from \"../../alert\";\nimport { getPlayerId } from \"../../game\";\nimport { listCommands } from \"../selectors\";\n\nexport async function whenSaveCommands(store, action) {\n  const state = store.getState();\n  const playerId = getPlayerId(state);\n  const commands = listCommands(state);\n\n  await api.put(`/api/v1/players/${playerId}/commands`, commands);\n  store.dispatch(replaceAlert(\"Game saved\"));\n}\n","export const SET_VIEW = \"view/SET_VIEW\";\nexport function setView(view) {\n  return {\n    type: SET_VIEW,\n    view,\n  };\n}\n","export function reduceSetView(state, action) {\n  const { view } = action;\n  return { ...state, ...view };\n}\n","import { SET_VIEW } from \"../actions\";\nimport { reduceSetView } from \"./private\";\n\nexport function reduceView(state = { root: \"Home\" }, action) {\n  switch (action.type) {\n    case SET_VIEW:\n      return reduceSetView(state, action);\n    default:\n      return state;\n  }\n}\n\nexport default reduceView;\n","import React from \"react\";\nimport { css, cx } from \"emotion\";\nimport { useDispatch } from \"../../../lib\";\nimport { setView } from \"../actions/setView\";\n\nconst linkClass = css`\n  cursor: pointer;\n  text-decoration: underline;\n  :hover {\n    color: var(--lightest);\n  }\n`;\n\nexport function Link({ children, view, className = null }) {\n  const followLink = useDispatch(setView, view);\n\n  return (\n    <span className={cx(linkClass, className)} onClick={followLink}>\n      {children}\n    </span>\n  );\n}\n","export function getView(state, field) {\n  return state.view[field];\n}\n","import { REPLACE_GAME } from \"../../game/actions/replaceGame\";\nimport { whenReplaceGame } from \"./private\";\n\nexport const gameViewMiddleware = store => next => action => {\n  next(action);\n\n  switch (action.type) {\n    case REPLACE_GAME:\n      return whenReplaceGame(store, action);\n    default: // do nothing\n  }\n};\n","import { alertDuck as alert } from \"./alert\";\nimport { blogDuck as blog } from \"./blog\";\nimport { gameDuck as game } from \"./game\";\nimport { gameCommandsDuck as gameCommands } from \"./gameCommands\";\nimport { gameViewDuck as gameView } from \"./gameView\";\nimport { viewDuck as view } from \"./view\";\n\nexport const appDucks = {\n  alert,\n  blog,\n  game,\n  gameCommands,\n  gameView,\n  view,\n};\n","import { gameViewMiddleware } from \"./middleware\";\n\nexport const gameViewDuck = {\n  middleware: gameViewMiddleware,\n};\n","import { setView } from \"../../view\";\n\nexport async function whenReplaceGame(store, action) {\n  store.dispatch(setView({ root: \"Play\", coordinates: null }));\n}\n","import { reduceView } from \"./reducer\";\n\nexport * from \"./actions\";\nexport * from \"./components\";\nexport * from \"./selectors\";\n\nexport const viewDuck = { default: reduceView };\n","import React, { useEffect } from \"react\";\nimport { Container, Breadcrumb } from \"react-bootstrap\";\nimport { useDispatch, useSelect } from \"../../lib\";\nimport { listPosts, Link, fetchPostList, setView } from \"../../ducks\";\n\nexport function ListPosts() {\n  const list = useSelect(listPosts);\n  const goHome = useDispatch(setView, { root: \"Home\" });\n  const refresh = useDispatch(fetchPostList);\n  useEffect(refresh, []);\n\n  return (\n    <Container>\n      <br />\n      <Breadcrumb>\n        <Breadcrumb.Item onClick={goHome}>Home</Breadcrumb.Item>\n        <Breadcrumb.Item active>Blog</Breadcrumb.Item>\n      </Breadcrumb>\n      <h1>Latest news</h1>\n      <ul>\n        {list.map(p => (\n          <li key={p.id}>\n            <Link view={{ postId: p.id }}>{p.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </Container>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { Container, Breadcrumb, Card, Button } from \"react-bootstrap\";\nimport ReactMarkdown from \"react-markdown\";\nimport { css } from \"emotion\";\nimport { useDispatch, useSelect } from \"../../lib\";\nimport { getPost, setView, fetchPost } from \"../../ducks\";\n\nconst postClassName = css`\n  background: #ddd;\n  color: rgba(0, 0, 0, 0.8);\n  padding: 1.5rem;\n  background: linear-gradient(\n    45deg,\n    rgba(242, 246, 248, 1) 0%,\n    rgba(216, 225, 231, 1) 50%,\n    rgba(181, 198, 208, 1) 51%,\n    rgba(224, 239, 249, 1) 100%\n  );\n\n  p {\n    max-width: 30rem;\n  }\n  h1 {\n    font-size: 5rem;\n    color: #000;\n  }\n  h1 + p {\n    font-size: 2rem;\n    color: rgba(0, 0, 0, 0.5);\n    max-width: none;\n    line-height: 1.1;\n    font-weight: 300;\n  }\n  h2 {\n    font-size: 3rem;\n    margin-top: 3rem;\n    border-bottom: solid 0.1em rgba(0, 0, 0, 0.8);\n    text-transform: uppercase;\n  }\n  h3 {\n    font-size: 2rem;\n    margin-top: 2rem;\n  }\n  blockquote {\n    background: black;\n    background: linear-gradient(\n      45deg,\n      rgba(76, 76, 76, 1) 0%,\n      rgba(89, 89, 89, 1) 12%,\n      rgba(102, 102, 102, 1) 25%,\n      rgba(71, 71, 71, 1) 39%,\n      rgba(44, 44, 44, 1) 50%,\n      rgba(0, 0, 0, 1) 51%,\n      rgba(17, 17, 17, 1) 60%,\n      rgba(43, 43, 43, 1) 76%,\n      rgba(28, 28, 28, 1) 91%,\n      rgba(19, 19, 19, 1) 100%\n    );\n    border-radius: 0.25rem;\n    color: rgba(255, 255, 255, 0.8);\n    border: none;\n    padding: 0.75rem 1.5rem;\n    max-width: 33rem;\n  }\n  blockquote p:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport function ShowPost({ postId }) {\n  const post = useSelect(getPost, { postId });\n  const goHome = useDispatch(setView, { root: \"Home\" });\n  const goBlog = useDispatch(setView, { postId: null });\n  const refresh = useDispatch(fetchPost, postId);\n  useEffect(refresh, []);\n\n  const backToPosts = (\n    <Button variant=\"link\" onClick={goBlog}>\n      « Back to posts\n    </Button>\n  );\n\n  return (\n    <Container>\n      <br />\n      <Breadcrumb>\n        <Breadcrumb.Item onClick={goHome}>Home</Breadcrumb.Item>\n        <Breadcrumb.Item onClick={goBlog}>Blog</Breadcrumb.Item>\n        <Breadcrumb.Item active>{post.title}</Breadcrumb.Item>\n      </Breadcrumb>\n      <Card body bg=\"light\" className={postClassName}>\n        <ReactMarkdown source={post.body} escapeHtml={false} />\n      </Card>\n      {backToPosts}\n    </Container>\n  );\n}\n","import { StarCommand, StarDescription } from \"./private\";\n\nconst priority = 1;\nconst type = \"star\";\n\nexport const starDescriptor = {\n  priority,\n  type,\n  Command: StarCommand,\n  Description: StarDescription,\n};\n","import React, { useCallback } from \"react\";\nimport { Form, Card } from \"react-bootstrap\";\nimport { useSelect } from \"../../lib\";\nimport { useCommandValue, getRace } from \"../../ducks\";\n\nexport function StarCommand({ entity }) {\n  const race = useSelect(getRace);\n\n  const [shipName, setShipName] = useCommandValue(entity.id, \"BuildShip\", \"\");\n  const onShipName = useCallback(ev => setShipName(ev.target.value), [\n    setShipName,\n  ]);\n\n  const [starbaseName, setStarbaseName] = useCommandValue(\n    entity.id,\n    \"BuildStarbase\",\n    \"\",\n  );\n  const onStarbaseName = useCallback(ev => setStarbaseName(ev.target.value), [\n    setStarbaseName,\n  ]);\n\n  const [droids, setDroids] = useCommandValue(entity.id, \"BuildDroids\", 0);\n  const onDroids = useCallback(ev => setDroids(ev.target.value), [setDroids]);\n\n  return (\n    <>\n      <Card.Body>\n        <Form.Group controlId=\"newShipName\">\n          <Form.Label>New ship name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            value={shipName}\n            onChange={onShipName}\n            placeholder=\"Ships name\"\n          />\n        </Form.Group>\n        <Form.Group controlId=\"newStarbaseName\">\n          <Form.Label>New starbase name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            value={starbaseName}\n            onChange={onStarbaseName}\n            placeholder=\"Starbases name\"\n          />\n        </Form.Group>\n        {race === \"droid\" && (\n          <Form.Group controlId=\"buildDroids\">\n            <Form.Label>Build droids</Form.Label>\n            <Form.Control\n              value={droids}\n              onChange={onDroids}\n              placeholder=\"Amount of droids\"\n            />\n          </Form.Group>\n        )}\n      </Card.Body>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nexport function StarDescription({ entity }) {\n  const {\n    name,\n    population,\n    maxPopulation,\n    playerId,\n    minerals,\n    mineralsReserve,\n  } = entity;\n\n  return (\n    <>\n      <Card.Header data-testid=\"name\" className=\"bg-warning\">\n        ● Star: <span>{name}</span>\n      </Card.Header>\n      <Card.Body>\n        {playerId && (\n          <div data-testid=\"owner\">\n            <strong>Owner</strong>: {playerId}.\n          </div>\n        )}\n        {population != null && (\n          <div>\n            <strong>Population</strong>:{\" \"}\n            <span data-testid=\"population\">{population}</span>/\n            <span data-testid=\"maximum-population\">{maxPopulation}</span>\n          </div>\n        )}\n        {minerals != null && (\n          <div>\n            <strong>Minerals</strong>:{\" \"}\n            <span data-testid=\"minerals-availability\">{minerals}</span>[\n            <span data-testid=\"minerals-reserve\">{mineralsReserve}</span>]\n          </div>\n        )}\n      </Card.Body>\n    </>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { ButtonGroup, Button, Card } from \"react-bootstrap\";\nimport { useCommandValue } from \"../../ducks\";\n\nexport function MoveShipCommand({ entity }) {\n  const [direction, move] = useCommandValue(entity.id, \"MoveShip\");\n  const moveDown = useCallback(() => move(\"down\"), [move]);\n  const moveUp = useCallback(() => move(\"up\"), [move]);\n  const moveLeft = useCallback(() => move(\"left\"), [move]);\n  const moveRight = useCallback(() => move(\"right\"), [move]);\n\n  return (\n    <Card.Body>\n      Move ship:\n      <ButtonGroup>\n        <Button\n          onClick={moveDown}\n          data-testid=\"go-down\"\n          active={direction === \"down\"}\n        >\n          v\n        </Button>\n        <Button\n          onClick={moveUp}\n          data-testid=\"go-up\"\n          active={direction === \"up\"}\n        >\n          ^\n        </Button>\n        <Button\n          onClick={moveLeft}\n          data-testid=\"go-left\"\n          active={direction === \"left\"}\n        >\n          &lt;\n        </Button>\n        <Button\n          onClick={moveRight}\n          data-testid=\"go-right\"\n          active={direction === \"right\"}\n        >\n          &gt;\n        </Button>\n      </ButtonGroup>\n    </Card.Body>\n  );\n}\n","import { StarbaseCommand } from \"./StarbaseCommand\";\nimport { StarbaseDescription } from \"./StarbaseDescription\";\n\nconst priority = 1;\nconst type = \"starbase\";\n\nexport const starbaseDescriptor = {\n  priority,\n  type,\n  Command: StarbaseCommand,\n  Description: StarbaseDescription,\n};\n","import { starDescriptor as star } from \"./star\";\nimport { shipDescriptor as ship } from \"./ship\";\nimport { starbaseDescriptor as starbase } from \"./starbase\";\nimport { indexBy } from \"../lib\";\n\nconst descriptors = [\n  star,\n  ship,\n  starbase,\n  //\n].sort((a, b) => a.priority - b.priority);\n\nconst descriptorsByType = indexBy(descriptors, \"type\");\n\nfunction getDescriptor(entity) {\n  return descriptorsByType[entity.type];\n}\n\nexport { descriptors, descriptorsByType, getDescriptor };\n","import { ShipCommand, ShipDescription } from \"./private\";\n\nconst priority = 5;\nconst type = \"ship\";\n\nexport const shipDescriptor = {\n  priority,\n  type,\n  Command: ShipCommand,\n  Description: ShipDescription,\n};\n","import React, { useCallback } from \"react\";\nimport { Form, Card } from \"react-bootstrap\";\nimport { MoveShipCommand } from \"./MoveShipCommand\";\nimport { useCommandValue } from \"../../ducks\";\n\nexport function ShipCommand({ entity }) {\n  const [load, setLoad] = useCommandValue(entity.id, \"LoadShip\", 0);\n  const onLoad = useCallback(ev => setLoad(ev.target.value), [setLoad]);\n\n  return (\n    <>\n      <Card.Body>\n        <Form.Group controlId=\"shipLoad\">\n          <Form.Label>Load</Form.Label>\n          <Form.Control\n            value={load}\n            onChange={onLoad}\n            placeholder=\"Amount of people\"\n          />\n        </Form.Group>\n      </Card.Body>\n      <MoveShipCommand entity={entity} />\n    </>\n  );\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nexport function ShipDescription({ entity }) {\n  const { name, population, maxPopulation, fuel, maxFuel } = entity;\n\n  return (\n    <>\n      <Card.Header data-testid=\"name\" className=\"bg-primary\">\n        ▶ Ship: <span>{name}</span>\n      </Card.Header>\n      <Card.Body>\n        {population != null && (\n          <div>\n            <strong>Population</strong>:{\" \"}\n            <span data-testid=\"population\">{population}</span>/\n            <span data-testid=\"maximum-population\">{maxPopulation}</span>\n          </div>\n        )}\n        {fuel != null && (\n          <div>\n            <strong>Fuel</strong>: <span data-testid=\"fuel\">{fuel}</span>/\n            <span data-testid=\"total-fuel-capacity\">{maxFuel}</span>\n          </div>\n        )}\n      </Card.Body>\n    </>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { Form, Card } from \"react-bootstrap\";\nimport { useCommandValue } from \"../../ducks\";\n\nexport function StarbaseCommand({ entity }) {\n  const [shipName, setShipName] = useCommandValue(entity.id, \"BuildShip\", \"\");\n  const onShipName = useCallback(ev => setShipName(ev.target.value), [\n    setShipName,\n  ]);\n\n  return (\n    <>\n      <Card.Body>\n        <Form.Group controlId={\"newShipName\" + entity.id}>\n          <Form.Label>New ship name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            value={shipName}\n            onChange={onShipName}\n            placeholder=\"Ships name\"\n          />\n        </Form.Group>\n      </Card.Body>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nexport function StarbaseDescription({ entity }) {\n  const { name, playerId, fuel, maxFuel } = entity;\n\n  return (\n    <>\n      <Card.Header data-testid=\"name\" className=\"bg-success\">\n        ⌔ Starbase: <span>{name}</span>\n      </Card.Header>\n      <Card.Body>\n        {playerId && (\n          <div data-testid=\"owner\">\n            <strong>Owner</strong>: {playerId}.\n          </div>\n        )}\n        {fuel != null && (\n          <div>\n            <strong>Fuel</strong>: <span data-testid=\"fuel\">{fuel}</span>/\n            <span data-testid=\"total-fuel-capacity\">{maxFuel}</span>\n          </div>\n        )}\n      </Card.Body>\n    </>\n  );\n}\n","import React from \"react\";\nimport { descriptors, Entity } from \"./\";\n\nexport function Entities({ entities }) {\n  return (\n    <>\n      {descriptors.flatMap(descriptor =>\n        entities\n          .filter(e => e.type === descriptor.type)\n          .map(entity => <Entity entity={entity} key={entity.id} />),\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useSelect } from \"../lib\";\nimport { getPlayerId } from \"../ducks\";\nimport { getDescriptor } from \"./\";\n\nexport function Entity({ entity }) {\n  const { name, type, playerId } = entity;\n  const { Description, Command } = getDescriptor(entity);\n  const currentPlayerId = useSelect(getPlayerId);\n\n  return (\n    <>\n      <Card data-testid={`${type}-${name}`}>\n        <Description entity={entity} />\n        {playerId === currentPlayerId && <Command entity={entity} />}\n      </Card>\n      <br />\n    </>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { useDispatch, useSelect } from \"../../lib\";\nimport { setView, getView, listEntitiesAtCoordinate } from \"../../ducks\";\nimport { Entities } from \"../../entities\";\n\nexport function CellView() {\n  const onBack = useDispatch(setView, { coordinates: null });\n  const coordinates = useSelect(getView, \"coordinates\");\n  const entities = useSelect(listEntitiesAtCoordinate, coordinates);\n\n  return useMemo(() => {\n    return (\n      <>\n        {coordinates && <button onClick={onBack}>Back</button>}\n        <Entities entities={entities} />\n      </>\n    );\n  }, [coordinates, entities, onBack]);\n}\n","import React, { useCallback, useState } from \"react\";\nimport { Container, Form, Button, Row, Col } from \"react-bootstrap\";\nimport { useDispatch } from \"../../lib\";\nimport { loginGame } from \"../../ducks\";\n\nexport function LoginView() {\n  const [playerId, setPlayerId] = useState(\"\");\n  const onPlayerId = useCallback(ev => setPlayerId(ev.target.value), [\n    setPlayerId,\n  ]);\n\n  const dispatchLogin = useDispatch(loginGame);\n  const onSubmit = useCallback(\n    ev => {\n      dispatchLogin(playerId);\n      ev.preventDefault();\n    },\n    [dispatchLogin, playerId],\n  );\n\n  return (\n    <Container>\n      <br />\n      <br />\n      <h1>Log in to play</h1>\n      <br />\n      <Row>\n        <Col md={4}>\n          <Form onSubmit={onSubmit}>\n            <Form.Group controlId=\"username\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                type=\"text\"\n                value={playerId}\n                onChange={onPlayerId}\n                placeholder=\"Enter username\"\n              />\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\">\n              Log in\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { css } from \"emotion\";\nimport { useDispatch, useSelect } from \"../../lib\";\nimport { CELL_WIDTH, CELL_HEIGHT } from \"./\";\nimport {\n  listEntitiesAtCoordinate,\n  getEntitiesAtCoordinateByType,\n  getPlayerId,\n  setView,\n  getView,\n} from \"../../ducks\";\n\nconst cellClassName = css`\n  width: ${CELL_WIDTH}em;\n  height: ${CELL_HEIGHT}em;\n  border: dashed 1px rgba(255, 255, 0, 0.2);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.yours {\n    background: rgba(0, 128, 256, 0.3);\n  }\n\n  &.highlighted {\n    background: rgba(255, 255, 128, 0.3);\n  }\n`;\n\nexport function MapCell({ row, column }) {\n  const byType = useSelect(getEntitiesAtCoordinateByType, { row, column });\n  const entities = useSelect(listEntitiesAtCoordinate, { row, column });\n  const playerId = useSelect(getPlayerId);\n  const onClickCell = useDispatch(setView, { coordinates: { row, column } });\n  const coordinates = useSelect(getView, \"coordinates\");\n\n  return useMemo(() => {\n    const style = {\n      width: `${CELL_WIDTH}em`,\n      height: `${CELL_HEIGHT}em`,\n      left: `${CELL_WIDTH * (column - 1)}em`,\n      top: `${CELL_HEIGHT * (row - 1)}em`,\n      position: \"absolute\",\n    };\n\n    // ✦ ★ ✶ ✸ ✹ ✺ ✨  sun ☀ ✾ ⭐🌏🌑🌕🌋💫🗼\t🪐\n    const contents = [];\n    if (byType[\"starbase\"]) {\n      contents.push(\n        <span data-testid=\"starbases\" key=\"starbases\" className=\"text-success\">\n          ⌔\n        </span>,\n      );\n    }\n    if (byType[\"star\"]) {\n      contents.push(\n        <span data-testid=\"star\" key=\"star\" className=\"text-warning\">\n          ●\n        </span>,\n      );\n    }\n    if (byType[\"ship\"]) {\n      contents.push(\n        <span data-testid=\"ships\" key=\"ships\" className=\"text-primary\">\n          ▶\n        </span>,\n      );\n    }\n\n    let className = cellClassName;\n    if (entities.some(e => e.playerId === playerId)) {\n      className += \" yours\";\n    }\n\n    if (\n      coordinates &&\n      coordinates.row === row &&\n      coordinates.column === column\n    ) {\n      className += \" highlighted\";\n    }\n\n    return (\n      <div\n        data-testid={`${row},${column}`}\n        style={style}\n        className={className}\n        onClick={onClickCell}\n        title={`${row},${column}`}\n      >\n        {contents}\n      </div>\n    );\n  }, [coordinates, row, column, byType, entities, playerId, onClickCell]);\n}\n","export const CELL_WIDTH = 5;\nexport const CELL_HEIGHT = 4;\n","import React, { useMemo } from \"react\";\nimport { useSelect, range } from \"../../lib\";\nimport { MapCell, CELL_WIDTH, CELL_HEIGHT } from \"./\";\nimport { getMap } from \"../../ducks\";\n\nexport function MapView() {\n  const map = useSelect(getMap);\n\n  return useMemo(() => {\n    const style = {\n      width: `${CELL_WIDTH * map.columns}em`,\n      height: `${CELL_HEIGHT * map.rows}em`,\n      position: \"relative\",\n      background: \"rgba(0,0,0,.1)\",\n      margin: \"1em auto 0\",\n    };\n\n    return (\n      <div data-testid=\"map-of-the-game\" style={style}>\n        {range(1, map.rows).flatMap(row =>\n          range(1, map.columns).map(column => (\n            <MapCell row={row} column={column} key={`${row},${column}`} />\n          )),\n        )}\n      </div>\n    );\n  }, [map]);\n}\n","import React, { useMemo } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { useDispatch, useSelect } from \"../../lib\";\nimport { setView, getMessages } from \"../../ducks\";\n\nfunction Message({ message }) {\n  const { coordinates, text } = message;\n  const go = useDispatch(setView, { coordinates });\n\n  return <ListGroup.Item onClick={go}>{text}</ListGroup.Item>;\n}\n\nexport function MessagesView() {\n  const messages = useSelect(getMessages);\n\n  return useMemo(\n    () => (\n      <ListGroup data-testid=\"messages\">\n        {messages.map((message, index) => (\n          <Message key={index} message={message} />\n        ))}\n      </ListGroup>\n    ),\n    [messages],\n  );\n}\n","import React, { useState, useCallback } from \"react\";\nimport { Container, Form, Button, Row, Col } from \"react-bootstrap\";\nimport { useDispatch } from \"../../lib\";\nimport { newGame } from \"../../ducks\";\n\nfunction NewPlayer({ index, setPlayers, players }) {\n  const player = players[index];\n  const setPlayer = useCallback(\n    changes => {\n      const copy = [...players];\n      copy[index] = { ...players[index], ...changes };\n      setPlayers(copy);\n    },\n    [players, index, setPlayers],\n  );\n  const onPlayerId = useCallback(\n    ev => setPlayer({ playerId: ev.target.value }),\n    [setPlayer],\n  );\n  const onRace = useCallback(ev => setPlayer({ race: ev.target.value }), [\n    setPlayer,\n  ]);\n\n  const playerN = `player${index + 1}`;\n  const raceN = `race${index + 1}`;\n  return (\n    <Row>\n      <Col>\n        <Form.Group controlId={playerN}>\n          <Form.Label>Player {index + 1}</Form.Label>\n          <Form.Control\n            type=\"text\"\n            value={player.playerId}\n            onChange={onPlayerId}\n            name={playerN}\n            placeholder=\"Enter the player alias\"\n          />\n        </Form.Group>\n      </Col>\n      <Col>\n        <Form.Group controlId={raceN}>\n          <Form.Label>Race {index + 1}</Form.Label>\n          <Form.Control\n            as=\"select\"\n            value={player.race}\n            onChange={onRace}\n            name={raceN}\n          >\n            <option>Human</option>\n            <option>Reptilian</option>\n            <option>Droid</option>\n          </Form.Control>\n        </Form.Group>\n      </Col>\n    </Row>\n  );\n}\n\nexport function NewView() {\n  const [mapCode, setMapCode] = useState(\"\");\n  const onMapCode = useCallback(ev => setMapCode(ev.target.value), []);\n\n  const [players, setPlayers] = useState([]);\n  const addPlayer = useCallback(\n    () => setPlayers([...players, { playerId: \"\", race: \"Human\" }]),\n    [players],\n  );\n\n  const dispatchNewGame = useDispatch(newGame);\n  const onSubmit = useCallback(\n    ev => {\n      dispatchNewGame(mapCode, players);\n      ev.preventDefault();\n    },\n    [dispatchNewGame, mapCode, players],\n  );\n\n  return (\n    <Container>\n      <br />\n      <br />\n      <h1>Create a new universe</h1>\n      <br />\n      <Row>\n        <Col md={4}>\n          <Form onSubmit={onSubmit}>\n            <Form.Group controlId=\"mapCode\">\n              <Form.Label>Map code</Form.Label>\n              <Form.Control\n                type=\"text\"\n                value={mapCode}\n                onChange={onMapCode}\n                name={mapCode}\n                placeholder=\"Enter the map code\"\n              />\n            </Form.Group>\n            {players.map((player, index) => (\n              <NewPlayer\n                key={index}\n                index={index}\n                setPlayers={setPlayers}\n                players={players}\n              />\n            ))}\n            <Button variant=\"secondary\" onClick={addPlayer}>\n              Add player\n            </Button>{\" \"}\n            <Button variant=\"primary\" type=\"submit\">\n              Create\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { Container, Button } from \"react-bootstrap\";\nimport { useDispatch, useSelect } from \"../../lib\";\nimport {\n  getPlayerId,\n  getRace,\n  getTurnNumber,\n  nextPlayer,\n  compileGame,\n} from \"../../ducks\";\n\nexport function MapStatsView() {\n  const playerId = useSelect(getPlayerId);\n  const race = useSelect(getRace);\n  const turnNumber = useSelect(getTurnNumber);\n  const onNext = useDispatch(nextPlayer);\n  const onCompile = useDispatch(compileGame);\n\n  return (\n    <Container>\n      <Button onClick={onNext}>Next</Button>\n      {\" | \"}\n      <Button onClick={onCompile}>Compile</Button>\n      {\" | \"}\n      Turn: <span data-testid=\"current-turnNumber\">{turnNumber}</span>\n      {\" | \"}\n      Player: <span data-testid=\"current-playerId\">{playerId}</span>\n      {\" | \"}\n      Race: <span data-testid=\"current-race\">{race}</span>\n    </Container>\n  );\n}\n","import { makeSubView } from \"../ducks\";\nimport { BlogView, GameView, HomeView, NewView, PlayView } from \"./\";\n\nexport const RootView = makeSubView(\"root\", {\n  Home: HomeView,\n  Play: PlayView,\n  Game: GameView,\n  New: NewView,\n  Blog: BlogView,\n});\n","import React from \"react\";\nimport { useSelect } from \"../../../lib\";\nimport { getView } from \"../selectors\";\n\nexport function makeSubView(field, Views) {\n  Views.null = Views.null || Views.undefined;\n  Views.undefined = Views.undefined || Views.null;\n\n  function makeUnknownView(viewName) {\n    return () => `Unknown view name \"${viewName}\" for \"${field}\".`;\n  }\n\n  function SubView() {\n    const viewName = useSelect(getView, field);\n    const View = Views[`${viewName}`] || makeUnknownView(viewName);\n\n    return <View />;\n  }\n  return SubView;\n}\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nexport function HomeView() {\n  return (\n    <Container>\n      <h1>Welcome!</h1>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { useSelect } from \"../../lib\";\nimport { hasPlayer, getView } from \"../../ducks\";\nimport { LoginView, CellView, MapView, MessagesView, MapStatsView } from \"../\";\n\nexport function PlayView() {\n  const logged = useSelect(hasPlayer);\n  const coordinates = useSelect(getView, \"coordinates\");\n\n  if (!logged) return <LoginView />;\n  return (\n    <>\n      <MapStatsView />\n      <Row>\n        <Col>\n          <MapView />\n        </Col>\n        <Col>\n          {!coordinates && <MessagesView />}\n          {coordinates && <CellView />}\n        </Col>\n      </Row>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Button, Container } from \"react-bootstrap\";\nimport { useDispatch, useSelect } from \"../../lib\";\nimport {\n  getPlayerId,\n  saveCommands,\n  logoutGame,\n  compileGame,\n} from \"../../ducks\";\n\nexport function GameView() {\n  const playerId = useSelect(getPlayerId);\n  const onSave = useDispatch(saveCommands);\n  const onCompile = useDispatch(compileGame);\n  const onLogout = useDispatch(logoutGame);\n\n  if (!playerId) return \"There is no game loaded\";\n  return (\n    <Container>\n      <Button onClick={onSave}>Save game</Button>\n      <Button onClick={onCompile}>Compile game</Button>\n      <Button onClick={onLogout}>Logout</Button>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { useSelect } from \"../../lib\";\nimport { getView } from \"../../ducks\";\nimport { ListPosts, ShowPost } from \"./\";\n\nexport function BlogView() {\n  const postId = useSelect(getView, \"postId\");\n  if (postId) return <ShowPost postId={postId} />;\n  return <ListPosts />;\n}\n","import React from \"react\";\nimport { Alert } from \"../ducks\";\nimport { Header, Version } from \"./\";\n\nexport function AppLayout({ children }) {\n  return (\n    <>\n      <Version />\n      <Header />\n      <Alert />\n      {children}\n    </>\n  );\n}\n","import React from \"react\";\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\n\nimport { useDispatch, useSelect } from \"../lib\";\nimport { setView, hasPlayer } from \"../ducks\";\n\nexport function Header() {\n  const goHome = useDispatch(setView, { root: \"Home\" });\n  const goPlay = useDispatch(setView, { root: \"Play\" });\n  const goNew = useDispatch(setView, { root: \"New\" });\n  const goBlog = useDispatch(setView, { root: \"Blog\" });\n  const logged = useSelect(hasPlayer);\n  const goGame = useDispatch(setView, { root: \"Game\" });\n\n  return (\n    <Navbar bg=\"light\" expand=\"lg\" data-testid=\"header\">\n      <Container>\n        <Navbar.Brand onClick={goHome}>●▶ PLANETS GAME</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link onClick={goHome}>Home</Nav.Link>\n            <Nav.Link onClick={goPlay}>Play</Nav.Link>\n            {logged && <Nav.Link onClick={goGame}>Game</Nav.Link>}\n            <Nav.Link onClick={goNew}>New</Nav.Link>\n            <Nav.Link onClick={goBlog}>Blog</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { css } from \"emotion\";\nimport pkg from \"../../../package.json\";\n\nconst versionClass = css`\n  position: absolute;\n  top: 0;\n  right: 0;\n  color: gray;\n  font-size: 85%;\n  z-index: 1000;\n`;\n\nexport function Version() {\n  return (\n    <div className={versionClass}>\n      {pkg.name} (v{pkg.version})\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootswatch/dist/darkly/bootstrap.css\";\nimport { makeApp } from \"./makeApp\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst appCompose =\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ trace: true, traceLimit: 25 });\nconst App = makeApp(undefined, appCompose);\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { createDucksStore } from \"./ducks\";\nimport { RootView } from \"./views\";\nimport { AppLayout } from \"./layout\";\n\nexport function makeApp(preloadedState, appCompose) {\n  const store = createDucksStore(preloadedState, appCompose);\n\n  function App() {\n    return (\n      <Provider store={store}>\n        <AppLayout>\n          <RootView />\n        </AppLayout>\n      </Provider>\n    );\n  }\n  return App;\n}\n","import { applyMiddleware, compose, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport ducksReducer from \"ducks-reducer\";\nimport ducksMiddleware from \"ducks-middleware\";\nimport { freezeReducer } from \"../lib\";\n\nimport { appDucks } from \"./\";\n\nexport function createDucksStore(preloadedState, appCompose = compose) {\n  const appReducer = freezeReducer(ducksReducer(appDucks));\n  const appMiddleware = ducksMiddleware(appDucks);\n\n  return createStore(\n    appReducer,\n    preloadedState,\n    appCompose(applyMiddleware(thunk, appMiddleware)),\n  );\n}\n"],"sourceRoot":""}